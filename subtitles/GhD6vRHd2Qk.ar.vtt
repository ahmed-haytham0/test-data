WEBVTT
Kind: captions
Language: ar

00:00:08.300 --> 00:00:11.500
كيف يمكننا تخزين قيم في ذاكرة الحاسوب؟

00:00:12.080 --> 00:00:14.180
وما هي المتغيرات الـ Variables؟

00:00:14.600 --> 00:00:17.480
وكيف يمكننا استخدامها في تطبيقنا؟

00:00:17.980 --> 00:00:22.740
وما هي الملاحظات الخمس التي سأقدمها لك حولها؟

00:00:23.420 --> 00:00:25.760
هذا ما سوفَ نتعرفُ عليهِ

00:00:25.940 --> 00:00:28.960
في هذا الدرس بعدَ الفاصلِ إن شاءَ الله

00:00:37.660 --> 00:00:39.760
السلامُ عليكم ورحمةُ اللهِ وبركاته

00:00:39.760 --> 00:00:43.040
وأهلاً بكمْ في الدرسِ الثامن من دروسِ سلسلةِ

00:00:43.300 --> 00:00:47.460
تَعلُمِ البرمجةِ للمبتدئينَ كلياً بواسطةِ السي شارب

00:00:47.920 --> 00:00:50.420
هل اشتقتم لي؟ وأنا أيضاً اشتقت لكم

00:00:51.080 --> 00:00:53.780
في البداية أحب أن أشارككم فرحتي

00:00:53.960 --> 00:00:57.260
بحصولي على شهادة مطور معتمد من Unity

00:00:57.760 --> 00:01:00.160
الشركة الرائدة في مجال تطوير الألعاب

00:01:00.360 --> 00:01:02.640
من خلال محركها الشهير Unity

00:01:03.260 --> 00:01:06.220
والذي يمكنك بواسطته تطوير ألعاب

00:01:06.220 --> 00:01:09.400
لجميع أنواع المنصات المتوفرة حالياً

00:01:10.460 --> 00:01:12.420
سواء للـ PC أو الـ Mobile

00:01:12.420 --> 00:01:16.320
أو حتى الـ Consoles مثل PlayStation وغيرها

00:01:16.880 --> 00:01:18.580
فالشهادة التي حصلت عليها

00:01:18.580 --> 00:01:22.880
ستكون تعزيزاً لما هو معلن على منصة طورني

00:01:23.240 --> 00:01:27.220
حيث ستكون السلسلة التالية لسلسلة البرمجة هذه

00:01:27.580 --> 00:01:33.060
سلسلة تعلم أساسيات تطوير الألعاب باستخدام محرك الألعاب Unity

00:01:33.340 --> 00:01:37.500
والتي أعدك أن تقضي وقتاً ممتعاً فيها بإذن الله

00:01:38.200 --> 00:01:41.480
في هذا الدرسْ سنتكلمُ عن مفهوم المتغيرات الـ Variables

00:01:41.560 --> 00:01:46.280
وكيف تقوم بحجز مكان مناسب لمتغيرك في ذاكرة الحاسوب

00:01:47.020 --> 00:01:50.620
وكيف تقوم بإعطائه قيماً تستخدمها في تطبيقك

00:01:51.740 --> 00:01:55.520
بالبداية دعنا ننظر إلى المعادلة الموجودة على الشاشة

00:01:56.800 --> 00:01:59.460
3 + x = 8

00:02:00.560 --> 00:02:02.840
فإن قمت بدراسة مادة الحساب

00:02:03.000 --> 00:02:06.480
فلابد أنك شاهدت مثل هذه المعادلة الحسابية

00:02:07.360 --> 00:02:10.180
فإن طلبتُ منك أن تقوم بإيجاد قيمة x

00:02:10.640 --> 00:02:16.580
فأنا متأكد أنك ستجيب من غير تردد أن قيمة المتغير x هي 5

00:02:17.520 --> 00:02:20.400
بنفس التحليل الذي استخدمته في المعادلة السابقة

00:02:20.760 --> 00:02:24.440
قم بالنظر الى الأسطر البرمجية الظاهرة على الشاشة

00:02:26.300 --> 00:02:28.040
x = 3;

00:02:28.460 --> 00:02:31.340
y = x + 4;

00:02:31.820 --> 00:02:34.640
وأخيراً سنطبع قيمة y

00:02:34.660 --> 00:02:36.900
Console.WriteLine(y);

00:02:38.140 --> 00:02:40.680
بإستخدام الخبرة البرمجية التي تمتلكها

00:02:40.840 --> 00:02:45.440
ستجد أن ناتج y سيكون الرقم 7

00:02:46.460 --> 00:02:50.140
وهذا بالضبط ما سيتم طباعته على الـ Console

00:02:51.260 --> 00:02:55.340
كما تعلنا سابقاً عن لغة الـ #C، أنها لغة مفهومة للبشر

00:02:55.820 --> 00:02:57.540
فالأسطر الظاهرة على الشاشة

00:02:57.540 --> 00:03:00.600
مطابقة تماماً لما تعلمناه في المعادلات الرياضية

00:03:01.020 --> 00:03:04.780
عدا عن أن هناك فاصلة منقوطة في نهاية كل سطر

00:03:05.200 --> 00:03:08.140
وأصبحنا نعرف معناها بناءً على الدروس السابقة

00:03:09.320 --> 00:03:12.440
وستجد نفسك خلال تقدمنا في الدروس القادمة

00:03:12.440 --> 00:03:15.680
أنك في معظم الأحيان ستفهم الأسطر البرمجية

00:03:15.860 --> 00:03:17.920
حتى قبل أن أقوم بشرحها لك

00:03:18.520 --> 00:03:22.600
وغالباً ستكون مطابقة لجمل استخدمتها في الماضي

00:03:22.800 --> 00:03:26.560
مثل التعامل مع الحساب والمعادلات الرياضية وغيرها

00:03:27.400 --> 00:03:29.660
بالعودة إلى المثال الظاهر على الشاشة

00:03:29.800 --> 00:03:32.820
فإن الحرفين x وy الموجودين أمامنا

00:03:32.820 --> 00:03:36.940
يطلق عليها اسم المتغيرات Variables

00:03:37.560 --> 00:03:41.500
ويمكن تعريف المتغير على أنه صندوق وهمي

00:03:41.500 --> 00:03:44.300
يتواجد في ذاكرة الحاسوب

00:03:44.700 --> 00:03:49.900
حيث بإمكانك استدعاءه لمعرفة القيمة التي يخزنها

00:03:50.520 --> 00:03:54.700
وبالتالي يمكنك أيضاً أن تودع قيماً فيه

00:03:55.140 --> 00:03:58.880
أو أن تستبدلها بقيم جديدة كلياً

00:03:59.320 --> 00:04:02.660
وهذه هي استخدامات الـ Variables الأساسية

00:04:03.540 --> 00:04:07.000
ويمكن للمتغيرات أن تحتوي على قيم متنوعة

00:04:07.160 --> 00:04:10.780
منها العدد الصحيح كما هو في مثالنا الحالي

00:04:11.120 --> 00:04:14.260
ويمكن أن تحتوي على خانة واحدة فقط

00:04:14.640 --> 00:04:18.760
ويمكن أن تحتوي على فقرات نصية طويلة

00:04:19.200 --> 00:04:22.160
ويمكن أيضاً أن تحتوي على التاريخ والوقت

00:04:22.300 --> 00:04:25.860
أو حتى أنواعاً جديدةً تقوم أنت بإنشائها

00:04:26.220 --> 00:04:29.540
كما سنلاحظ في الدروس القادمة إن شاء الله

00:04:30.160 --> 00:04:34.000
نعود لمثالنا حيث سنجد أن قيمة المتغيرات

00:04:34.120 --> 00:04:36.500
هي قيمة عددية صحيحة

00:04:36.920 --> 00:04:40.640
فقيمة المتغير x هي العدد الصحيح 3

00:04:41.080 --> 00:04:47.340
وقيمة المتغير y هي حاصل جمع قيمة المتغير x

00:04:47.620 --> 00:04:53.340
مضافاً إليها الرقم 4 ليصبح الإجمالي هو العدد الصحيح 7

00:04:53.960 --> 00:04:59.420
التطبيق الحالي نظرياً صحيح، لكنه غير مقبول لدى لغة الـ #C

00:04:59.700 --> 00:05:06.420
لأننا لم نقم بحجز الصندوق الوهمي الخاص بكل متغير

00:05:06.640 --> 00:05:10.340
تعرفنا في الدروس السابقة أنه بعد الـ Compile Process

00:05:10.500 --> 00:05:13.880
سيقوم الـ NET run-time. بتنفيذها

00:05:14.420 --> 00:05:20.120
ومن مسؤولياته الأساسية أن يقوم بحجز مساحاتٍ كافيةٍ في الذاكرة

00:05:20.440 --> 00:05:25.060
للمتغيرات التي قمنا باستخدامها بناءً على نوع قيمها

00:05:25.640 --> 00:05:29.780
ففي مثالنا هنا يجب أن نخبر الـ Run-time

00:05:30.160 --> 00:05:35.880
بضرورة حجز مساحة في الذاكرة للمتغيرين x وy

00:05:36.320 --> 00:05:40.400
بما يتناسب مع حجم القيم العددية لكليهما

00:05:41.040 --> 00:05:42.380
كيف نقوم بذلك؟

00:05:42.460 --> 00:05:46.560
هذا ما سوف نتعرف عليه معاً في هذا الدرس إن شاء الله

00:05:47.180 --> 00:05:48.560
لإنشاء مشروع جديد

00:05:48.840 --> 00:05:51.540
سأقوم بتكرار ما قمنا به في الدروس السابقة

00:05:52.040 --> 00:05:57.800
سأذهب إلى قائمة File -- &gt; New -- &gt; Project

00:05:58.400 --> 00:06:02.840
ومن شاشة New Project سأحرص على اختيار #C

00:06:03.280 --> 00:06:05.540
ثم اختيار Console Application

00:06:06.480 --> 00:06:14.380
و سأقوم بعدها بإعادة تسمية المشروع إلى Variables

00:06:15.680 --> 00:06:18.080
ثم سأضغط على زر OK

00:06:18.280 --> 00:06:21.640
ليبدأ برنامج الـ Visual Studio بتهيئة المشروع

00:06:22.120 --> 00:06:25.720
بالهيكلية التي تعرفناها ، Solution و Project

00:06:25.900 --> 00:06:27.900
كما تعلمنا في الدرس السابق

00:06:28.140 --> 00:06:30.100
وسأجد في منتصف الشاشة

00:06:30.560 --> 00:06:32.520
ملف Program.cs

00:06:32.720 --> 00:06:38.220
يحتوي على الأسطر التي أستطيع بدء الكتابة فيها

00:06:38.360 --> 00:06:42.140
بين السطر 12 و 13

00:06:42.900 --> 00:06:47.000
أنوه هنا إلى أن كل الملاحظات التي ذكرتها في الدرس السابق

00:06:47.180 --> 00:06:50.980
يمكنك تطبيقها متى شعرت بعدم وصول المعلومة

00:06:51.520 --> 00:06:55.640
قم بإيقاف الفيديو وكرره مرة أو مرتين إن احتجت لذلك

00:06:56.080 --> 00:07:00.800
خذ وقتك حتى تتمكن من تطوير مهارة تمييز الفروقات

00:07:01.180 --> 00:07:06.360
سواءً في حالة الحروف الصغيرة Small Letter والكبيرة Capital Letter

00:07:06.680 --> 00:07:11.340
أو بالفروقات بين علامات الترقيم والفواصل والمسافات

00:07:12.160 --> 00:07:15.840
التي سنستخدمها خلال كتابتنا للأسطر البرمجية

00:07:16.080 --> 00:07:20.840
قم بتطوير مهارة المطابقة بين ما أقومُ بكتابتهِ على شاشتي

00:07:21.120 --> 00:07:26.260
وبين ما ستقومُ أنتَ بكتابته على نسختك من برنامج الـ Visual Studio

00:07:28.380 --> 00:07:33.080
في حال ظهور أي خطوط حمراء متعرجة تحت الجمل

00:07:33.400 --> 00:07:38.840
قم بالتحري بطريقتك الخاصة لاكتشاف أي خلل وقم بحل هذا الخلل

00:07:39.900 --> 00:07:43.560
ولحجز مكان يتناسب مع نوع المتغير في الذاكرة

00:07:43.840 --> 00:07:46.860
نحن بحاجة لإخبار الـ Compiler بفعل ذلك

00:07:47.620 --> 00:07:52.220
وعملية الحجز هذه تسمى Variables Declaration

00:07:52.980 --> 00:07:56.180
أي أننا سنخبر الـ NET Run-time.

00:07:56.380 --> 00:08:00.100
بحجز مساحة كافية في ذاكرة الحاسوب

00:08:00.420 --> 00:08:04.200
من خلال تحديد إسم ونوع هذا المتغير

00:08:04.880 --> 00:08:07.320
كما سأقوم بكتابته الآن

00:08:08.140 --> 00:08:11.580
في السطر رقم 12 سوف أقوم بالضغط على Enter

00:08:11.580 --> 00:08:15.340
لإعطاء مساحة للكتابة ، وسوف أقوم بكتابة

00:08:15.860 --> 00:08:18.820
int x;

00:08:20.540 --> 00:08:24.260
int y;

00:08:26.120 --> 00:08:30.740
في السطرين السابقين سألت الـ NET run-time.

00:08:30.780 --> 00:08:35.460
أن يقوم بحجز مساحة للمتغيرين x وy

00:08:36.020 --> 00:08:41.380
والكلمة int هي النوع العددي الصحيح

00:08:41.620 --> 00:08:45.600
إختصار لكلمة Integer

00:08:46.620 --> 00:08:49.900
والعددُ الصحيحُ هو مصطلحٌ في علم الرياضيات

00:08:50.380 --> 00:08:54.080
يمثل العدد الكامل الذي لا كسور عشرية فيه

00:08:54.880 --> 00:08:57.500
فمثلاً الرقم 5 هو رقم صحيح

00:08:57.980 --> 00:09:03.740
لكن الرقم 5.6 هو رقم غير صحيح

00:09:03.760 --> 00:09:08.140
لأنه يحتوي على أرقام بعد الفاصلة العشرية

00:09:09.100 --> 00:09:13.700
بالإضافة إلى أن النوع Integer في لغة الـ #C يمثل الأعداد الصحيحة

00:09:14.020 --> 00:09:16.640
فإن القيم يجب أن تكون بين

00:09:16.640 --> 00:09:21.760
2,147,483,648- و 2,147,483,648

00:09:22.040 --> 00:09:27.060
وهذا حجم القيمة التي يتم حجزها في الذاكرة لهذا النوع

00:09:27.800 --> 00:09:32.540
أما في حال كنا نحتاج أن نتعامل مع رقم أكبر من هذه القيم

00:09:32.980 --> 00:09:37.460
فنحن بحاجة إلى نوع غيرِ النوع الصحيح Integer

00:09:37.560 --> 00:09:41.700
وسنتعرف على أنواع أخرى في المستقبل إن شاء الله

00:09:41.720 --> 00:09:43.640
بعد الـ Variables Declaration

00:09:43.760 --> 00:09:48.980
دعنا نقوم بإكمال كتابتنا للأسطر البرمجية كما في المثال أول الدرس

00:10:16.640 --> 00:10:22.740
ولا ننسى  ;( )Console.ReadLine

00:10:23.560 --> 00:10:29.140
لكي نتمكن من مشاهدة القيم قبل إنتهاء البرنامج

00:10:32.360 --> 00:10:35.440
إن قمنا بتنفيذ التطبيق سنجد أن المخرجات

00:10:35.560 --> 00:10:38.480
هي نفسها التي توقعناها سابقاً

00:10:44.640 --> 00:10:49.600
ألا وهي الرقم 7 كما تشاهد الآن على شاشة الـ Console

00:10:52.900 --> 00:10:54.900
إن لم تحصل على هذه القيمة

00:10:54.900 --> 00:11:00.960
قم بإيقاف الفيديو وتتبع ما قمتُ أنا بكتابته لتتأكد ما قمتَ أنت بكتابته

00:11:01.140 --> 00:11:04.320
على نسخة برنامج الـ Visual Studio الخاصة بك

00:11:04.900 --> 00:11:12.100
الآن بعد ما قمنا بحجز المتغيرات في السطرين رقم 13 و14

00:11:13.220 --> 00:11:23.680
قمنا في الأسطر 16 و17 بإسناد قيم لهذه المتغيرات

00:11:24.600 --> 00:11:26.900
باستخدام إشارة المساواة =

00:11:27.580 --> 00:11:30.800
وهذه الإشارة تسمى Assignment Operator

00:11:31.660 --> 00:11:36.400
وسنتعرف على حالات خاصة منها في دروس متقدمة إن شاء الله

00:11:37.380 --> 00:11:41.800
وإشارة المساواة تقوم بأخذ ما على الجانب الأيمن

00:11:42.140 --> 00:11:44.940
وتضعه على ما في الجانب الأيسر

00:11:46.340 --> 00:11:49.920
وتطبيق ذلك على مثالنا هنا، يمكنك القول

00:11:50.080 --> 00:11:57.360
أعطني قيمة 3 وضعها في المتغير الذي اسمه x

00:11:57.840 --> 00:12:00.520
وبالمثل في السطر التالي

00:12:00.840 --> 00:12:05.480
فإننا نقوم بإضافة قيمة للمتغير

00:12:05.600 --> 00:12:10.360
عدا أننا نقوم بشيء إضافي هنا

00:12:10.620 --> 00:12:14.740
ألا وهو أننا أولاً نقوم باستدعاء قيمة x

00:12:21.920 --> 00:12:27.640
نحن نسأل الحاسوب بأن يقوم بالبحث عن موقع المتغير x في الذاكرة

00:12:27.660 --> 00:12:31.960
ثم نأخذ قيمته ونقوم بجمعها إلى الرقم 4

00:12:32.240 --> 00:12:36.700
والمجموع الكلي يتم وضعه في المتغير y

00:12:38.160 --> 00:12:43.100
وفي السطر رقم 19 نحن نقوم بعملية طباعة لقيمة y

00:12:46.640 --> 00:12:52.260
نحن نقوم بطلب مكان وجود المتغير y

00:12:52.380 --> 00:12:55.200
وأخذ قيمته لطباعته على الـ Console

00:12:55.260 --> 00:12:59.180
لتأكيد ضرورة حجز المتغيرات قبل استخدامها

00:12:59.380 --> 00:13:04.740
سأقوم بتحويل السطر الذي يحتوي على تعريف المتغير x إلى سطر ملاحظة

00:13:05.420 --> 00:13:11.780
وتعلمنا أنه لفعل ذلك يلزم إضافة // إلى بداية السطر

00:13:15.820 --> 00:13:20.240
بعد فعل ذلك، ستلاحظ ظهور خطوطٍ حمراءَ متعرجة

00:13:20.500 --> 00:13:26.760
تحت المتغيرين في السطر رقم 16 والسطر رقم 17

00:13:27.360 --> 00:13:32.820
وإن قمت بوضع مؤشر الفأرة على موضع الخطأ ستجد الرسالة

00:13:33.220 --> 00:13:37.020
The name x Does not exist in the current context

00:13:37.960 --> 00:13:42.900
والتي تعني أن المتغير x غير معرّف في هذه المنطقة

00:13:43.820 --> 00:13:45.560
ولكنك لربما تقول

00:13:46.240 --> 00:13:51.520
لقد قمنا بتعريف المتغير x في السطر رقم 13

00:13:52.080 --> 00:13:54.480
لكننا كما اتفقنا في درس سابق

00:13:54.840 --> 00:14:00.860
أننا بتحويل سطر برمجي إلى جملة ملاحظة Comment Statement

00:14:01.060 --> 00:14:03.880
فإننا نخبر مترجم لغة الـ #C

00:14:04.140 --> 00:14:06.420
والمعروف بالـ NET run-time.

00:14:06.700 --> 00:14:11.500
أن يقوم بتجاهل هذا السطر تماماً وكأنه غير موجود

00:14:12.260 --> 00:14:18.040
وكأن حال الـ Compiler ينظر إلى المتغير x هنا ويقول

00:14:18.700 --> 00:14:22.760
ما هذا الشيء؟ من هذا الـ x الذي تتحدث عنه؟

00:14:22.760 --> 00:14:27.500
لم أسمع به من قبل، ولا أعرف ماذا تريد أن أفعل به

00:14:27.940 --> 00:14:31.540
إن لم تعطني معلومات أكثر عن هذا المدعو x

00:14:31.900 --> 00:14:34.120
سأرفع العلم الأحمر في وجهك

00:14:34.120 --> 00:14:37.460
ولن أدعك تمر تحت هذه الظروف الغامضة

00:14:37.780 --> 00:14:41.060
ولكي نقوم بحل المشكلة التالية

00:14:41.180 --> 00:14:44.960
ولكي نرضي السيد الـ Compiler المحترم

00:14:44.960 --> 00:14:47.760
يجب علينا التراجع عن جملة الملاحظة

00:14:47.760 --> 00:14:51.440
لنجعلها جملة صريحة قابلة للتنفيذ

00:14:51.700 --> 00:14:53.700
نصل إلى نهاية درسنا

00:14:53.820 --> 00:14:56.500
ألقاك في الدرس التالي إن شاء الله

