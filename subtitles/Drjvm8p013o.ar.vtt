WEBVTT
Kind: captions
Language: ar

00:00:16.781 --> 00:00:21.760
لأن هذه المنهجية تُعتبر أقوى وأسرع طريقة لتعلم لغة البرمجة بايثون 

00:00:21.760 --> 00:00:25.760
من البداية حتى الإحتراف ، لا يعني بالضرورة أنها منهجية معقدة 

00:00:26.000 --> 00:00:27.000
بل الأبسط على الإطلاق

00:00:27.709 --> 00:00:30.680
مرحباً معكم رحال من مجتمع بايثون العربي 

00:00:31.000 --> 00:00:33.800
في هذا الفيديو ستتعلم كل شيء عن لغة بايثون

00:00:33.800 --> 00:00:35.840
في أقصر وقت ممكن 

00:00:35.840 --> 00:00:38.840
وضعنا الكثير من الجهد وعصارة التجربة في هذه المادة

00:00:39.344 --> 00:00:44.320
بل إننا حاولنا إخراجها بلغة عربية فصحى لإثراء المحتوى العربي 

00:00:44.882 --> 00:00:48.000
فلا تبخلوا علينا بالإشتراك ومشاركة الحلقة مع أصدقائكم 

00:00:48.628 --> 00:00:50.000
لنبدأ على بركة الله

00:00:56.761 --> 00:00:58.761
قبل أن نبدأ : لماذا بايثون بالضبط ؟

00:00:59.281 --> 00:01:03.280
لأنها واحدة من أكثر لغات البرمجة شعبية في العالم

00:01:03.491 --> 00:01:06.480
لأنها سهلة  التعلم ومناسبة للمبتدئين

00:01:06.972 --> 00:01:11.000
لأنها فائقة التنوع و تُستخدم في العديد من المجالات

00:01:11.217 --> 00:01:14.800
لأنها تعتمد منطق مباشر وبسيط لتنفيذ المهام 

00:01:15.402 --> 00:01:18.400
لأنها غنية بالإضافات والمكتبات المفتوحة المصدر 

00:01:18.779 --> 00:01:25.821
ولأنها تعتبر من اللغات التي توفر وظائف عالية الأجر في مجالي علم البيانات والتعلم الآلي وتطوير الويب

00:01:26.316 --> 00:01:33.000
إذن ما هي الطريقة الصحيحة لتعلم لغة بايثون وكيف أضع خطوتي الأولى في طريق الإحتراف كمبرمج ؟ 

00:01:33.301 --> 00:01:40.301
لا تقلق سنرافقك خطوة خطوة بالإعتماد على منهجية مختصرة ،بسيطة ،وقوية في نفس الوقت 

00:01:40.631 --> 00:01:42.821
أحضر قهوتك واذهب إلى مكان هاديء

00:01:43.217 --> 00:01:49.200
ولكن قبل ذلك يجب أن أذكرك بأن لا تنسى أن تسجل الإشتراك للإنضمام لمجتمعنا الصغير

00:01:51.000 --> 00:01:54.000
 الخطوة رقم صِفر أو خطوة ما قبل الإنطلاق 

00:01:54.551 --> 00:01:59.520
حيث يجب عليك أن تتخلص من كل العوائق والأثقال عبر 3 مباديء أساسية 

00:02:00.044 --> 00:02:10.000
الأول : يجب عليك التخلص من كل الأحكام المُسبقة والخرافات التي لديك عن البرمجة حتى تُكَوِّن منظورك الخاص من خلال هذه التجربة

00:02:10.351 --> 00:02:18.320
الثاني : كُن صبوراً ،لا تستعجل ،ووفر أنفاسك لأن هذا المجال عبارة عن ماراثون وليس سباقا للمسافات القصيرة

00:02:18.901 --> 00:02:32.400
الثالث: لا تُقم بحصر نفسك في مصدر واحد ،فحتى الأديان السماوية التي مرت على الأرض مع جلالة قدرها لم تأمر المؤمنين بها بالأخذ من مصدر واحد فإياك أن تترك شخصاً آخر يُقنعك بالعكس 

00:02:32.881 --> 00:02:38.880
وقد جعلنا هذه النقط واضحةً لم يتبقى سِوى إعداد بيئة التطوير ومحرر الشيفرة

00:02:39.000 --> 00:02:46.000
إذن ما عليك إلا الذهاب إلى الموقع الرسمي بايثون دوت أورغ لتحميل لغة بايثون ثم تثبيتها على جهازك 

00:02:46.400 --> 00:02:51.000
بالمناسبة حجمها لا يتجاوز 30 ميجا وتعمل على كل أنظمة التشغيل 

00:02:51.892 --> 00:02:58.400
عملية التثبيت في غاية البساطة كما ترون ويمكن استخدام بايثون أيديل لكتابة الأكواد وتنفيذها 

00:03:00.000 --> 00:03:02.679
مبروك لقد أصبحت الآن مبرمج 

00:03:02.720 --> 00:03:04.889
إلى اللقاء في حلقة جديدة 

00:03:05.733 --> 00:03:11.400
طبعاً أمزح ولكن للأمانة فقط فإنني منذ اللحظة التي كتبتُ فيها أول "هيلو ورولد" 

00:03:11.686 --> 00:03:12.680
تغيرت حياتي للأبد 

00:03:12.725 --> 00:03:16.720
صِدقاً البرمجة ستغير طريقة رؤيتك للعالم

00:03:16.941 --> 00:03:18.941
أعتذر إن أصبحت عاطفياً بعض الشيء 

00:03:19.800 --> 00:03:27.346
بعد تثبيت لغة بايثون يجب عليك اختيار محرر شيفرة مناسب  وهو ما يطلق عليه بيئة التطوير أو أيدي إي اختصارا 

00:03:27.849 --> 00:03:36.400
لأنها ستساعدك على كتابة الأكواد ، تصحيح الأخطاء ، والأتمام التلقائي وغيرها من الميَزات التي ستساعدك لتكون أكثر إنتاجية 

00:03:36.611 --> 00:03:44.000
عموماً أفضل بيئة تطوير أنصح بها هي بيئة الفيجوال ستوديو كود من مايكروسوفت لأنها مجانية ومفتوحة المصدر 

00:03:44.197 --> 00:03:46.197
ويتم تطويرها بشكل مستمر 

00:03:46.198 --> 00:03:55.160
إذن لاستخدامها مع عليك إلا الذهاب إلى موقعها الرسمي وتثبيتها ثم تثبيت الإضافات الخاصة بلغة بايثون من داخلها

00:03:56.948 --> 00:04:03.240
وبيئة التطوير الثانية التي أنصح بها هي لمن لا يريدون تثبيت لغة بايثون ولا أي شيء على أجهزتهم  

00:04:03.440 --> 00:04:10.000
وهي بيئة جوجل كولاب التي تسمح لك بكتابة وتنفيذ أكوادِ بايثون باستخدام متصفح الأنترنت

00:04:10.553 --> 00:04:12.320
إذا لم يكن لديك أنترنت ثابت لا أنصح بها

00:04:12.854 --> 00:04:16.400
بيئة التطوير الثالثة  لمن ليست لديهم حواسيب ولا أنترنت 

00:04:16.559 --> 00:04:20.000
أو لمن يريدون تعلم بايثون على هواتفهم المحمولة

00:04:20.153 --> 00:04:25.120
هي تطبيق بايدرويد لأجهزة الأندرويد , وتطبيق بايثو لأجهزة الآي أو إس

00:04:26.054 --> 00:04:33.040
ولكن يجب أن أوضح أنه لا يوجد خيار أفضل ولا احترافي مثل بيئة التطوير الكاملة التي تعمل على أجهزة الحاسب

00:04:33.760 --> 00:04:40.760
كما يجب أن نُنوّه أيضاً أن لغة بايثون لا تحتاج سوى لحاسب بسيط جداً وأقل حتى من المتوسط

00:04:40.822 --> 00:04:44.000
حرفياً أي حاسب يصلح لتثبيت لغة بايثون 
 

00:04:45.692 --> 00:04:48.000
الخطوة الأولى : مرحلة الأساسيات 

00:04:50.995 --> 00:05:00.000
بعد إعداد بيئة التطوير سوف ننتقل لمرحلة الأساسيات ويمكن القول بأنها أهم مرحلة على الإطلاق وستتعلم فيها 

00:05:00.444 --> 00:05:01.440
المتغيرات ونوع البيانات

00:05:01.905 --> 00:05:03.000
العمليات الشرطية

00:05:03.656 --> 00:05:06.000
الحلقات التكرارية
الدوال

00:05:06.123 --> 00:05:09.120
التعامل مع الأخطاء والاستثناءات .
تثبيت المكتبات

00:05:09.600 --> 00:05:17.520
الشرح سوف يتطرق لكل هذه الأشياء بشكل مكثف وسريع  والبيئة التي سنستخدمها كبداية هي جوجل كولاب

00:05:19.160 --> 00:05:23.160
أنواع البيانات في لغة بايثون - داتا تايبس

00:05:24.651 --> 00:05:31.640
في لغة بايثون تذكّر أن هناك ستة أنواع أساسية من المتغيرات التي يمكنك التصريح بها واستخدامها

00:05:31.832 --> 00:05:38.800
والمتغير ببساطة هو مكان محجوز في ذاكرة الكمبيوتر يمكنك تخزين قيمة أو بيانات محددة فيه

00:05:39.390 --> 00:05:44.360
بايثون تتميز بكونها لغة ديناميكية التصريح أي أنها تسمح لنا كمبرمجين

00:05:44.560 --> 00:05:46.711
 بإنشاء وحجز المتغيرات بدون الحاجة لتحديد نوع المتغير

00:05:48.677 --> 00:05:57.640
لا تقلق سنتحدث عن هذا لاحقا أما الآن فأريدك أن تركز على الأنواع الستة للمتغيرات التي ستستخدمها طيلة الوقت كمبرمج 

00:05:59.162 --> 00:06:00.662
النوع الأول: المتغيرات النصية

00:06:00.962 --> 00:06:02.962
String Variables

00:06:03.085 --> 00:06:08.080
هو نوع من المتغيرات يمثل السلاسل النصية أو بتعبير أبسط النصوص

00:06:08.362 --> 00:06:10.362
ويمكن التصريح به على الشكل التالي

00:06:11.618 --> 00:06:19.000
لاحظت أننا كتبنا إسم المتغير الذي نريد ، ثم أتبعناه بإشارة التساوي التي تُستخدم لإسناد القيمة إليه

00:06:19.177 --> 00:06:25.160
الأمر المهم الذي أريدك أن تحفظه هو أننا إذا أردنا إسناد قيمة من نوع سترينغ لأي متغير

00:06:25.809 --> 00:06:28.800
يجب وضعها داخل علامتي تنصيص ("") مزدوجتين

00:06:29.000 --> 00:06:33.080
كما يمكنك أيضاً إستخدام علامتي تنصيص مفردتين أو علامات تنصيص ثلاثية

00:06:33.670 --> 00:06:38.000
النوع الثاني : المتغيرات الرقمية 
Numeric Variables

00:06:38.023 --> 00:06:41.000
المتغيرات الرقمية تنقسم لـ 3 أنواع :

00:06:41.780 --> 00:06:48.200
متغير من نوع إينتيجر ويمثل عدد صحيح ، وهو الذي نشير إليه في الرياضيات بالرمز  زي  

00:06:48.452 --> 00:06:52.440
يمكن حجز هذا النوع من المتغيرات بهذه الطريقة

00:07:01.320 --> 00:07:05.640
متغير من نوع فلوت ويمثل الأعداد التي تحتوي على فاصلة عشرية

00:07:10.000 --> 00:07:19.160
متغير من نوع كومبليكس ويمثل الأعداد المركبة أو الأعداد العقدية ، وهي أعداد تخيلية لا أريد التطرق إليها لأنك قد لا تستخدمها نهائياً

00:07:20.339 --> 00:07:24.320
النوع الثالث : المتغيرات المتسلسلة
 ( Sequence Variables)
 

00:07:25.590 --> 00:07:29.560
هي نوع من المتغيرات يمكنها أن تحمل قيم متعددة في نفس الوقت

00:07:29.979 --> 00:07:34.320
ويطلق عليه (إيدربلز) لأنها تتميز بمجموعة من الخصائص والوظائف

00:07:34.565 --> 00:07:37.560
سنتعرف في الحلقات التكرارية لاحقا

00:07:37.573 --> 00:07:41.240
 إذن هناك 3 أنواع من المتغيرات المتسلسلة في بايثون

00:07:41.482 --> 00:07:43.482
القوائم ليستس

00:07:43.593 --> 00:07:48.480
متغير القائمة ليست في لغات البرمجة الأخرى يطلق عليه آري أي المصفوفة 

00:07:48.560 --> 00:07:52.800
 هذا المتغير يتم إسناد القيمة إليه بإستخدام القوسان المستطيلان 

00:07:53.000 --> 00:07:57.000
توضع بداخلهما العناصر التي نريد التصريح بها ونفصل بينها بفاصلة

00:07:57.347 --> 00:08:03.320
با لمناسبة يمكنك استخدام أي نوع من المتغيرات داخلها وذلك يشمل استخدام قوائم داخلها أيضاً

00:08:03.400 --> 00:08:10.000
 إذا أردت طباعة عنصر محدد من داخل القائمة ما عليك إلّا أن تكتب إسم القائمة يليه ترتيب العنصر بهذا الشكل

00:08:16.000 --> 00:08:18.000
المجموعات توبلز

00:08:18.719 --> 00:08:26.680
التوبل متغير مشابه للقوائم تماما ، إلّا أنه ثابث ولا يمكن التلاعب بالعناصر الموجودة بداخله ولا تجزئتها

00:08:26.958 --> 00:08:36.920
كما ترى في هذا المثال لتعريف متغير توبل نستخدم الأقواس وعند محاولة طباعة عنصر معين من داخله تظهر لنا رسالة الخطأ التالية لأنه ثابت

00:08:40.073 --> 00:08:41.040
الـ سيتس

00:08:41.336 --> 00:08:46.320
الـ سيت من حيث المبدأ شبيهة بالـ توبل إلا أن العناصر الموجودة داخلها

00:08:46.489 --> 00:08:53.480
لا يجب أن تكون مكررة ولا مرتبة وإذا حاولت وضع أي متغير متسلسل داخلها لا تقبله

00:08:53.975 --> 00:09:03.000
لتعريف متغير من نوع سيت يجب استخدام الأقواس المزهّرة {} ، عند وضع قيمتين مكررتين داخل الـ سيت ستلاحظ أن القيمة المكررة تم حذفها

00:09:03.969 --> 00:09:07.000
النوع الرابع : متغيرات التعيين

00:09:07.313 --> 00:09:08.280
Mapping Variables

00:09:09.215 --> 00:09:15.200
وهنا سنتكلم عن متغير واحد هو متغير القواميس ديكت ،   شبيه بمتغير القائمة 

00:09:15.200 --> 00:09:20.200
حيث يمكن أيضا أن يحتوي عناصر متعددة إلا أنه يعمل بطريقة المفتاح والقيمة 

00:09:20.670 --> 00:09:28.640
لإنشاء متغير ديكت نستخدم هذين القوسين المزهّرين تم نكتب إسم المفتاح ثم نقطتان لإسناد القيمة إليه

00:09:28.640 --> 00:09:33.640
ولطباعة عنصر معين من القاموس نستخدم إسم مفتاحه بهذه الطريقة

00:09:44.796 --> 00:09:46.796
النوع الخامس : المتغير المنطقي

00:09:46.828 --> 00:09:47.800
Boolean variable

00:09:47.947 --> 00:09:53.000
المتغير البولياني يحمل قيمتين فقط وهما ترو   أو فالز ، يعني صح أو خطأ

00:09:53.913 --> 00:09:58.400
ويتم التصريح بهذا النوع من المتغيرات بإسناد إحدى هاتين القيمتين إليه

00:09:59.000 --> 00:10:01.600
النوع السادس : المتغيرات الثنائية

00:10:02.135 --> 00:10:03.120
Binary variables

00:10:03.375 --> 00:10:12.360
المتغيرات الباينارية هي مجموعة من المتغيرات تُخزن  سلسلة من القيم بين 0 و 255 (أي 8 بت

00:10:12.520 --> 00:10:19.000
وتستخدم للتعامل مع البيانات الثنائية . لا أعتقد أننا بحاجة للتطرق إليها ، لذا لا تزعج نفسك بها الآن

00:10:20.100 --> 00:10:25.080
كانت هذه الأنواع الستة هي المتغيرات الأساسية في لغة بايثون 

00:10:25.286 --> 00:10:31.280
الآن سيكون قد اتضح لك أن تعريف المتغيرات هنا بسيط وديناميكي

00:10:31.280 --> 00:10:36.280
ما رأيك أن نقوم بعمل مقارنة بين بايثون وبين لغات تعتمد على ستاتيك تيبين

00:10:36.280 --> 00:10:42.280
على اليسار طريقة تعريف المتغيرات في لغتي السي والسي شارب وعلى اليمين لغة بايثون

00:10:42.280 --> 00:10:47.280
كما تلاحظ في لغة بايثون يتم التعرف على نوع المتغير أوتوماتيكيا من خلال قيمته

00:10:48.628 --> 00:10:49.600
تمرين سريع ! 

00:10:49.779 --> 00:10:52.760
ما هو نوع المتغيرات التي تظهر الآن أمامكم

00:10:53.084 --> 00:10:55.800
إذا كان جوابك صحيح ؛ فقد إستوعبت الدرس

00:10:56.042 --> 00:11:03.040
 إن أخطأت في كل الأجوبة أو أحدها فإنك لست مستعد للإنتقال إلى المراحل المُقبلة ويجب عليك إعادة الفيديو من الأول

00:11:04.793 --> 00:11:07.760
ربما تتسآل كيف نتحقق من نوع المتغير ؟ 

00:11:08.198 --> 00:11:13.160
ببساطة نقوم بكتابة تايب  يليها إسم المتغير بين قوسين على الشكل التالي 

00:11:13.472 --> 00:11:15.472
 تظهر أنواع المتغيرات بشكل مختصر

00:11:16.061 --> 00:11:20.040
والمتغيرات في كل لغات البرمجة يمكن إجراء العديد من العمليات عليها 

00:11:20.040 --> 00:11:25.800
على سبيل المثال المتغيرات الرقمية يمكن استخدام العمليات الحسابية عليها بشكل رياضي محض ، مثل

00:11:26.040 --> 00:11:30.040
عملية الجمع 
عملية الضرب
عملية القسمة.
الاُس .

00:11:30.321 --> 00:11:32.600
وغيرها من العمليات الرياضية الاخرى

00:11:33.122 --> 00:11:39.120
ولكن يجب أن تنتبه لأنه لا يمكنك استخدام العمليات الرياضية بين متغيرين أحدهم رقمي وآخر نصي

00:11:39.120 --> 00:11:42.120
في هذه الحالة ستظهر رسالة الخطأ 

00:11:42.238 --> 00:11:48.200
ولكن الجميل في بايثون أنه يمكننا استعمال بعض الرموز الرياضية على متغيرات نصية بهذه الطريقة ، 

00:11:48.400 --> 00:11:53.240
 وعلى السلاسل أيضا . كما يمكنك إسناد قيم للمتغيرات على شكل عمليات رياضية

00:11:54.306 --> 00:11:57.000
وصلنا إلى نهاية الفصل الأول من المرحلة الأولى

00:11:57.330 --> 00:12:03.320
سنتكلم في الفصل القادم عن الحجر الأساس في المنطق البرمجي : العمليات الشرطية .
 

00:12:07.913 --> 00:12:09.000
العمليات الشرطية

00:12:09.779 --> 00:12:11.779
Conditional Operations

00:12:13.709 --> 00:12:20.680
قبل أن نتطرق للعمليات الشرطية عليك أن تعرف أن بايثون ككل لغات البرمجة العالية المستوى

00:12:20.743 --> 00:12:29.720
 تستمد المنطق الخاص بها من الرياضيات وتستخدم رموزا مشابهة لتنفيذ عمليات المقارنة والعمليات المنطقية على المتغيرات

00:12:29.818 --> 00:12:34.000
 هذه الرموز تُسمى بشكل عام العوامل (أوبيراتورز

00:12:34.396 --> 00:12:40.360
 الآن سنتعرف على عوامل المقارنة ونتستخدمها لمقارنة متغيرين أو أكثر مع بعض

00:12:41.272 --> 00:12:46.240
إشارتي التساوي نستخدمهما للتحقق من أن المتغير الأول يساوي المتغير الثاني

00:12:46.240 --> 00:12:51.240
والناتج يكون ترو إن تحقق شرط التساوي ، فالز إن لم يتحقق .

00:12:51.963 --> 00:13:00.000
علامة التعجب وإشارة تساوي هي عكس العامل السابق ، وتستخدم للتحقق من عدم تَساوي المتغير الأول للمتغير الثاني 

00:13:00.347 --> 00:13:03.320
الناتج يكون ترو إن تحقق شرط اللاتساوي

00:13:03.745 --> 00:13:08.000
شارة أكبر من  تستخدم للتحقق بأن المتغير الأول أكبر من الثاني 

00:13:08.566 --> 00:13:13.560
إشارة أصغر من  تستخدم للتحقق بأن المتغير الأول أصغر من الثاني

00:13:13.800 --> 00:13:18.000
يوجد لدينا أيضاً أكبر من أو تُساوي ، وأصغر من أو تُساوي وتكتبان بهذا الشكل

00:13:18.200 --> 00:13:24.520
بما أننا تعلمنا عوامل المقارنة فما هي الطريقة التي سنربط بها عملية المقارنة مع تنفيذ الشروط ؟ 

00:13:25.114 --> 00:13:33.080
على سبيل المثال إذا أردنا أن يحصل شيء معين عند تساوي مُتغيرين . الجواب هو التعابير الشرطية أو الجملة الشرطية

00:13:33.319 --> 00:13:34.000
"if statement"  

00:13:34.144 --> 00:13:36.000
كما تسمى في كل لغات البرمجة

00:13:36.387 --> 00:13:39.360
في لغة بايثون تُكتب الجملة الشرطية بهذا الشكل

00:13:39.720 --> 00:13:47.000
بدأنا بكتابة إف حيث أن كونديشن هي الشرط المراد تحقيقه ، أي الشرط الذي يجب أن يُساوي ترو وجوباً وقطعاً 

00:13:47.838 --> 00:13:51.000
نُتبعها بنقطتين ثم نضغط إنتر للذهاب للسطر الثاني

00:13:51.800 --> 00:13:54.246
نلاحظ أنه تم إضافة فراغ تلقائي

00:13:54.381 --> 00:14:00.400
  identation هذا الفراغ يُسمى ويشير إلى ماسنكتبه هنا تابع للسطر الذي قبله

00:14:00.831 --> 00:14:01.400
 identation  الـ

00:14:01.400 --> 00:14:03.800
spaces هي عبار عن أربعة

00:14:04.533 --> 00:14:07.000
tab ويمكن إضافتها عبر مفتاح  من لوحة المفاتيح

00:14:07.000 --> 00:14:13.000
بعد الفراغ نكتب الشيئ الذي نريد أن يتنفذ بعد تحقق الشرط . هذه جملة شرطية بسيطة 

00:14:14.317 --> 00:14:18.280
اختيارياً يمكننا العودة إلى السطر التالي وإضافة عِبارَة  اختيارياً يمكننا العودة إلى السطر التالي وإضافة عِبارَة

00:14:18.280 --> 00:14:24.280
 التي تعني أنه في حالة عدم تحقق الشرط condition سيتم تنفيذ الكود الموجود تحتها

00:14:24.280 --> 00:14:32.280
إنتبه جيداً للفراغات ، يجب أن تكون تحت  مباشرة ، كما يجب أن يكون الموجود تحتها مسبوقاً بـ 

00:14:32.343 --> 00:14:33.320
إليك مثال بسيط :

00:14:33.907 --> 00:14:39.000
نقوم بتعريف متغيرين أي و بي و سي  وإسناد القيم إليهما بالشكل التالي

00:14:39.400 --> 00:14:44.000
لنفترض أننا نريد من البرنامج أن يقوم بطباعة كلمة  "يس"

00:14:44.142 --> 00:14:51.120
إذا كان المتغيرين متساويان وكلمة "نو"  إذا كان العكس ، **فإننا سنكتب الجملة الشرطية بهذه الطريقة

00:14:52.843 --> 00:14:59.000
أولا عبارة if تم الشرط الذي نريد تحقيقه ، ثم else لتحديد ماذا سيحصل إن لم يتحقق الشرط ....

00:14:59.200 --> 00:15:05.400
عند تنفيذ الكود تمت طباعة yes لأن المتغيرين a و  b لهما نفس القيمة 

00:15:05.801 --> 00:15:09.400
 جيد ،دعنا نجرب نفس الكود وبكن بمقارنة a و   c 

00:15:10.414 --> 00:15:17.400
تمت طباعة “no” وفي هذه الحالة بما أن الشرط لم يتحقق تم تنفيذ الكود الموجود داخل else

00:15:17.442 --> 00:15:20.440
هذه هي الجملة الشرطية بكل بساطة

00:15:20.476 --> 00:15:26.400
ولكن هل تعلم أنه يمكنك إستخدام ما يُسمى بالعوامل المنطقية (لوجيكال أوبيرايتورز) داخلها

00:15:26.821 --> 00:15:32.000
هذه العوامل هي : أند   و أور  و نوت  وهي تشرح نفسها ومعناها واضح

00:15:32.000 --> 00:15:39.000
في هذه الجملة الشرط هو إذا كانت a و b  أكبر من 10 قم بطباعة "yes"

00:15:39.000 --> 00:15:44.000
وهنا استخدمنا or التي تعني بالعربي "أو" 

00:15:44.000 --> 00:15:52.000
أما نوت  فسنرى كيفية استخدامه بعد التعرف على معامِلات الهوية  إيدانتيتي أوبيراتور وهي عبارة عن معاملي : إيز و نوت أيز

00:15:52.000 --> 00:16:02.000
في هذا المثال is تعني "هو" وقد تمت طباعة "yes"  لأن قيمة a هي قيمة c . وعند استخدام not قبل is  فإنها تعكس عمله 

00:16:03.356 --> 00:16:06.000
 
النوع الأخير من المعاملات الذي أريدك أن تتعرف عليه 

00:16:06.000 --> 00:16:11.000
هو ما يسمى بمُعاملات العضوية أو الإنتساب ممبر شيب أوبيرايتوز

00:16:11.000 --> 00:16:13.000
وهما :  إن  و نوت إن 

00:16:13.356 --> 00:16:18.800
ونستخدمها للتحقق من وجود أو عدم وجود قيمة معينة داخل متغير محدد 

00:16:19.000 --> 00:16:27.080
على سبيل المثال في هذا التطبيق قمنا بإنشاء قائمة تحتوي على أسماء ونريد التحقق إن كان إسم "إبراهيم" بينها أو لا

00:16:27.080 --> 00:16:29.080
 كما ترى الأمر سهل جد

00:16:29.080 --> 00:16:32.800
أما نوت إن  فهي عكس إن . تماما مثل اللغة الإنجليزية 

00:16:32.800 --> 00:16:38.080
أخيرا يُمكن إضافة إيليف للجمل الشرطية في حالة أردت عمل شروط متعددة

00:16:38.233 --> 00:16:42.200
بحيث تكون صيغتها على الشكل التالي أو مثل هذا المثال

00:16:47.202 --> 00:16:49.202
كان هذا كل شيء عن الجمل الشرطية

00:16:49.529 --> 00:16:55.520
بالإضافة إلى أنه يمكنك كتابة جمل شرطية داخل بعض بهذا الشكل

00:16:56.743 --> 00:17:03.000
إذا كنت تستطيع حل هذا التمرين الذي يظهر على الشاشة وتنفيذ الكود بنجاح وبدون أخطاء في جهازك

00:17:03.000 --> 00:17:10.720
فقد أستوعبت الدرس وأنت مستعد للإنتقال للفصل التالي الذي ستتعلم فيه عن الحلقات التكرارية

00:17:10.720 --> 00:17:15.720
التي تسبب الكثير من الارتباك لأغلب المبرمجين المبتدئين

00:17:18.850 --> 00:17:20.850
 الحلقات التكرارية 

00:17:21.531 --> 00:17:25.520
كمبرمجين أحيانًا نحتاج لتكرار مجموعة من الأوامر بشكل متتابع

00:17:25.520 --> 00:17:28.520
أو لتنفيذ أمر معين لعدد محدد من المرات 

00:17:28.520 --> 00:17:33.000
أولا لكي تتعرف على أهمية الحلقات التكرارية إليك هذه المسألة 

00:17:33.000 --> 00:17:39.000
مثلا لدينا قائمة تحتوي على أسماء المشتركين الأكثر تفاعلا في قناتنا واسمها "أكتيف سابز"

00:17:39.000 --> 00:17:42.000
 ونريد طباعة هذه الأسماء كل إسم على حِدة

00:17:42.077 --> 00:17:46.800
 فإننا بدون استخدام الحلقات التكرارية سنضطر لكتابة الكود بالطريقة التالية 

00:17:46.800 --> 00:17:51.040
ولكن ماذا لو كانت هذه القائمة تحتوي على أكثر من 1000 إسم 

00:17:51.345 --> 00:17:53.320
ألن يكون من الغباء كتابة ألف سطر ؟

00:17:53.320 --> 00:17:57.320
هنا يأتي دور الحلقات وباستخدامها يمكننا اختصار الكود إلى سطرين فقط

00:17:57.320 --> 00:18:04.000
سنعود لشرح هذا الكود بالتفصيل المُمل ولكن بعد أن نتعرف على أنواع الحلقات التكرارية في لغة بايثون 

00:18:04.000 --> 00:18:11.000
وأنت تُشاهد هذه الحلقة اُذكّرك أنه يمكنك طرح أي سؤال عبر تويتر وسنقوم بالرد عليك في أسرع وقت

00:18:11.081 --> 00:18:14.000
هناك نوعان من الحلقات التكرارية في لغة بايثون 

00:18:14.221 --> 00:18:16.000
النوع الأول فور لوبس

00:18:16.000 --> 00:18:19.240
حلقات الـ فور لوبس هي النوع الأكثر استخداما وانتشاراً 

00:18:19.304 --> 00:18:24.280
وموجودة تقريبا بنفس الصيغة في كل لغات البرمجة وهي تُكتب بهذه الصيغة

00:18:24.520 --> 00:18:29.520
قبل كل شيء بدأنا بتعريف متغير من نوع ليست باسم اكتيف سابس

00:18:30.142 --> 00:18:35.120
 ووضعنا داخله أسماء بعض متابعينا الأوفياء .
ثم بدأنا حلقة التكرار  بكتابة العبارة  فور

00:18:35.607 --> 00:18:41.600
أتبعناها متغير الحلقة اكس ، يمكنك اختيار أي إسم تريده لمتغير الحلقة بالمناسبة 

00:18:41.744 --> 00:18:47.000
ثم كتبنا ان متبوعة يإسم القائمة اكتيف سابس التي عرّفناها في السطر الأول

00:18:47.000 --> 00:18:51.720
نقطتين وعدنا إلى السطر وكتبنا تعليمة لطباعة المتغير اكس 

00:18:51.720 --> 00:18:58.720
مرة أخرى إنتبه للفراغ identation ، لأن جميع الأوامر التي تريدها أن تتنفذ داخل الحلقة يجب أن تكون تابعة لها

00:18:58.720 --> 00:19:00.000
سنقوم بتنفيذ الكود لنرى ماذا سيحصل

00:19:01.000 --> 00:19:05.800
إذن بإيجاز يمكننا اختصار الكود في التالي :

00:19:06.407 --> 00:19:11.000
لكل عنصر من عناصر القائمة "أكتيف سابس" قُم بطباعة العنصر الحالي في كل مرة

00:19:11.000 --> 00:19:17.000
مع العلم أن متغير الحلقة يُمثل العنصر الأول في اللفة الأولى ثم يمثل العنصر الثاني في اللفة الثانية

00:19:17.000 --> 00:19:22.000
وهكذا دواليك حتى يصل إلى آخر عنصر في القائمة ثم تنتهي الحلقة

00:19:22.000 --> 00:19:30.800
عرفنا أن الحلقات تُستخدم لتجزئة المتغيرات القابلة للتجزئة كالمتغيرات المتسلسلة ثم تقوم باللف عليها بعدد عناصرها

00:19:30.800 --> 00:19:36.800
ولكن ماذا لو أردنا فقط تكرار كود معين لعدد محدد من المرات بدون استخدام أي متغير

00:19:36.800 --> 00:19:44.800
**في هذه الحالة نستخدم دالة range() ،متبوعة بعدد المرات التي نريد أن يتنفذ بها الكود الذي بداخل الحلقة ،  بهذه الطريقة :**

00:19:45.068 --> 00:19:53.040
أما النوع الثاني من الحلقات فهو حلقات وايل لوبس ، وتسمى الحلقات الشرطية وسبب هذه التسمية ستتعرف عليه من خلال هذا المثال :

00:19:54.147 --> 00:19:58.120
قمنا بتعريف متغير باسم ماجيك نامبر وأسند إليه القيمة 10

00:19:58.120 --> 00:20:06.800
بدأنا الحلقة بعبارة while متبوعة بهذا الشرط الذي تُساوي 10 سيتحقق في حالة كانت قيمة المتغير Magic_number

00:20:06.800 --> 00:20:10.800
لقد تعلمنا هذا في  درس التعابير الشرطية يمكنك الرجوع إليه 

00:20:11.160 --> 00:20:13.800
أخير كتبنا تعليمة الطباعة داخل الحلقة 

00:20:13.800 --> 00:20:19.800
وهذا يعني أن تعليمة الطباعة سوف تتكرر مادام الشرط : Magic_number == 10 صحيح

00:20:20.195 --> 00:20:22.800
 دعنا نرى ماذا سيحصل إن قمنا بتنفيذ الكود

00:20:22.800 --> 00:20:31.800
طبعاً كود غبي وسيقوم بطباعة جملة "إتس ماجيك" إلى الأبد لأن شرط تَساوي المتغير "ماجيك نامبر" للقيمة 10 مُتحقق على طول ،

00:20:32.302 --> 00:20:36.280
ولن تتوقف الحلقة حتى ينكسر هذا الشرط . وهذا ما سنفعله الآن 

00:20:37.000 --> 00:20:43.000
قمنا بتغيير قيمة المتغير Magic_number إلى صفر ، ,وغيرنا الشرط إلى Magic_number &lt; 10

00:20:43.400 --> 00:20:49.000
وأضفنا سطر جديد للكود لكي تتغير قيمته في كل لفة للحلقة بـ +1  

00:20:49.000 --> 00:20:56.400
عند تنفيذ الكود سنلاحظ أن عبارة (“its magic!”) ستستمر بطباعة نفسها مادامت قيمة  Magic_number أصغر من 10

00:20:56.800 --> 00:21:00.000
حين يصبح أكبر من 10 ستتوقف الحلقة تلقائيا

00:21:00.000 --> 00:21:02.000
نتهينا من درس الحلقات

00:21:02.228 --> 00:21:07.200
ذا استطعت أن تقوم بحل التمرين الذي يظهر أمامك الآن على الشاشة فقد استوعبت الدرس جيداً 

00:21:09.357 --> 00:21:11.000
الدوال 
Functions

00:21:11.000 --> 00:21:16.000
الدوال مفردها دالة ويقابلها في اللفظ الإنجليزي مصطلح "ميثود" او "فانكشن" 

00:21:16.000 --> 00:21:22.800
الدالة هي وحَدة أو قطعة من الكود تؤدي وظيفة معينة بحيث لا يمكن تنفيذها إلا عند استدعائها

00:21:22.800 --> 00:21:25.800
مفهوم الدوال أخذته البرمجة من الرياضيات

00:21:25.800 --> 00:21:36.000
فإذا كان لديك أساس رياضي قوي فستكون إلى هذه اللحظة قد فهمت بأن الدوال هي عملية تدل على قيمة أو وظيفة محددة إنطلاقاً من قيمة مسبقة

00:21:36.941 --> 00:21:45.400
لا تزعج نفسك بالتعريفات ، كل ما عليك تذكره أن الدالة هي جزء صغير من الكود لا يعمل أثناء التنفيذ إلا في حالة استدعائه 

00:21:45.400 --> 00:21:46.920
 والدوال في لغة بايثون نوعان 

00:21:47.680 --> 00:21:51.680
النوع الأول : الدوال الجاهزة 
(Built-in Functions) 

00:21:51.680 --> 00:21:59.680
وهي مجموعة كبيرة من الدوال والوظائف الجاهزة توجد داخل اللغة بحث يمكنك استخدامها عبر استدعائها متى شئت

00:21:59.680 --> 00:22:06.000
على سبيل المثال دالة الطباعة print أو دالة type التي نستخدمها لمعرفة نوع المتغير

00:22:06.000 --> 00:22:09.000
أو دالة len التي نعرف بها طول النصوص أو السلاسل

00:22:09.000 --> 00:22:19.000
لكي تتعرف من حين لآخر على دوال جديدة ، ما عليك سوى كتابة اسم المتغير متبوعا بنقطة وستظهر أمامك قائمة بأغلب الدوال والوظائف التابعة له 

00:22:19.000 --> 00:22:25.000
كل الدول تنتهي بالأقواس ، الأقواس تكون فارغة في حالة كون الدالة لا تحتاج منك معلومات إضافية 

00:22:25.400 --> 00:22:29.000
النوع الثاني : الدوال المُعرّفة
(User-defined Functions

00:22:29.000 --> 00:22:34.000
هذا النوع من الدوال أنت من يجب عليك تعريفها وتحديد وظائفها عزيزي المبرمج 

00:22:34.000 --> 00:22:40.000
وطريقة كتابة دالة جديدة ينبغي أن تكون بسيطة في بايثون ، بهذه الطريقة تماماً

00:22:40.000 --> 00:22:45.000
لتعريف أي دالة نستخدم عبارة def  وهي اختصار لكلمة define

00:22:45.000 --> 00:22:49.000
بعدها نضع الأسم الذي اخترناه للدالة متبوعاً بقوسين فارغين ونقطتين

00:22:49.000 --> 00:22:53.000
 تم نعود للسطر لوضع الوظائف والقيم التابعة للدالة داخلها

00:22:53.400 --> 00:22:59.000
في حالتنا هذه استخدمنا فقط تعليمة الطباعة ، كما ترى بعد تنفيذ الكود لم يحصل أي شيء

00:22:59.000 --> 00:23:02.000
لأنها يجب علينا استدعاء الدالة بهذا الشكل 

00:23:02.000 --> 00:23:10.800
الأمر بهذه السهولة ، الآن سنتقدم خطوة أخرى للأمام وسوف نتعرف على طريقة تمرير القيم إلى الدول واسترجاعها منها .

00:23:10.800 --> 00:23:13.000
أولاً تمرير القيم للدالة 

00:23:13.000 --> 00:23:19.800
القيم التي يتم تمريرها إلى الدالة تدعى بارامترات وهي عبارة عن متغيرات تابعة للدالة

00:23:19.800 --> 00:23:23.000
في المثال السابق قمنا بإنشاء دالة بدون بارمترات

00:23:23.000 --> 00:23:27.000
الآن سنقوم بإنشاء دالة تأخذ بارامتر واحد وتعيد طباعته

00:23:28.030 --> 00:23:32.800
كما ترى فلقد وضعنا المتغير name بين قوسي الدالة وفي تعليمة الطباعة 

00:23:32.800 --> 00:23:36.000
في هذه الحالة لدينا دالة تحتوي على بارامتر واحد 

00:23:36.000 --> 00:23:41.400
ويجب علينا أثناء استدعاء الدالة وضع قيمة المتغير اسم وإلا ستظهر رسالة خطأ 

00:23:41.800 --> 00:23:46.400
كما ترى في كل مرة نضع قيمة جديدة يتم طباعة التحية متبوعة بالأسم

00:23:46.946 --> 00:23:49.400
ثانيا إسترجاع القيم من الدالة

00:23:49.400 --> 00:23:57.000
في المثال السابق الدالة أخدت متغير واحد وقامت بعملية الطباعة فقط ولكنها لم تُعِد لنا أية قيمة

00:23:57.000 --> 00:24:01.000
لإسترجاع قيمة محددة من الدالة نستخدم تعليمة "ريتورن" 

00:24:01.409 --> 00:24:06.000
في هذا المثال سنقوم بتعريف دالة تأخذ متغيرين وتُرجع لنا حاصل جمعهما 

00:24:06.000 --> 00:24:11.360
ونقوم باستدعاء الدالة بهذه الطريقة  أو بوضع قيمتها في متغير جديد بهذا الشكل

00:24:11.480 --> 00:24:22.800
كما يمكن كتابة الدالة بهذه الطريقة أيضا وإستخدام ما شئت من متغيرات داخلها ولكن إنتبه لأن المتغيرات التي تعرّفها داخل الدالة تعمل داخل الدالة فقط

00:24:22.800 --> 00:24:25.360
كان هذا كل شيء عن الدوال بإيجاز

00:24:25.360 --> 00:24:33.400
ولكن هناك مجموعة من المفاهيم المتقدمة التي لا أرى ضرورةَ التطرق إليها الآن، لأنك ستكتشفها بنفسك في الوقت المناسب

00:24:33.400 --> 00:24:37.800
هذه المفاهيم تشمل القيم الإفتراضية والـ كيورد أكريمنتس و العودية

00:24:37.800 --> 00:24:45.000
وأخيراً من المفيد أن تعلم أن لغة بايثون تدعم نوعا آخر من الدوال يُدعى دوال لامبدا

00:24:45.000 --> 00:24:50.400
وهي عبارة عن دوال مختصرة تبدأ بعبارة لامبدا ويمكن تعريفها بالشكل التالي 

00:24:50.400 --> 00:24:52.000
واستدعاءها بهذه الطريقة 

00:24:52.000 --> 00:24:57.400
أعتقد أن المثال لا يحتاج للشرح لأنه نفس المثال الذي كان قبله ولكن بشكل مختصر

00:24:57.400 --> 00:25:01.400
يمكنك التدرب عن طريق حل مسائل مثل هذه التي تظهر أمامك على الشاشة

00:25:09.400 --> 00:25:13.800
معالجة الأخطاء والاستثناءات
 Exceptions Handling

00:25:14.400 --> 00:25:20.400
التعامل مع الأخطاء التي قد تقع أثناء تنفيذ البرنامج مهارة ضرورية لكل مبرمج

00:25:20.400 --> 00:25:25.400
فأي برنامج كمبيوتر يمكن أن يتوقف عن العمل إذا حصل خطأ معين في الكود الخاص

00:25:25.400 --> 00:25:32.000
بل وفي بعض الحالات الأخطاء البرمجية يمكن أن تُعرّض المُستخدِم لضياع بياناته أو تعرضها للإختراق

00:25:32.000 --> 00:25:39.400
للحيلولة دون ذلك توفر كل لغات البرمجة الناضجة آلية كاملة للتعامل مع الأخطاء الواردة الحدوث أثناء تنفيد الكود

00:25:39.400 --> 00:25:44.800
ولغة بايثون من ضمن اللغات التي توفّر هذه الآلية بشكل بسيط وأكثر فاعلية

00:25:44.800 --> 00:25:49.400
لكي نفهم أكثر دعنا نتطرق لنوع الأخطاء التي يمكن تواجهنا كمبرمجين

00:25:49.800 --> 00:25:52.400
الأخطاء البنيوية
( Syntax Errors 

00:25:52.400 --> 00:25:59.000
شبيهة بالأخطاء اللغوية وتحصل عندما ننسى إغلاق قوس معين أو عندما نخطيء في كتابة الـ "إيدونتيشن" وغيرها 

00:25:59.475 --> 00:26:02.000
هذا النوع من الأخطاء لا يسمح لك بتنفيذ الكود أساسا

00:26:02.542 --> 00:26:04.200
الاستثناءات إيدونتيشن
(Exceptions

00:26:04.200 --> 00:26:09.000
وهي أخطاء برمجية تحدث عند تنفيذ الكود وينتج عنها توقف البرنامج

00:26:09.000 --> 00:26:13.800
 على سبيل المثال حين نحاول إستخدام متغير لم نقم بتعريفه من قبل

00:26:13.800 --> 00:26:19.200
أو عند تنفيذ عملية حسابية بين متغيرين أحدهما نصي والآخر رقمي

00:26:19.200 --> 00:26:21.200
الأخطاء المنطقية 
( Logical Errors

00:26:21.520 --> 00:26:26.520
هذا النوع من الأخطاء هو الأسوء لأنه لا ينتج عنه توقف البرنامج ولا رسالة الخطأ

00:26:26.520 --> 00:26:34.520
إلا أن الكود لا يقوم بالنتيجة المطلوبة منه ، وهذا يحدث بسبب خطأ منطقي يقوم به المبرمج عادة ، في المثال التالي

00:26:34.520 --> 00:26:41.800
طلبنا من المستخدم إدخال قيمتين  xوy  عبر دالة input ثم قمنا بطباعة x+y

00:26:41.800 --> 00:26:46.520
 كما ترى إشتغل الكود بطريقة صحيحة إلّا أنه يعطيك نتائج خاطئة 

00:26:46.520 --> 00:26:55.520
السبب هو أن القيمة الإفتراضية لدالة INPUT تكون دائما من نوع string أي نصية ، وتطبيق عملية الجمع على النصوص يعمل بهذه الطريقة 

00:26:55.520 --> 00:27:00.520
سنقوم بتصحيح هذا الكود لاحقا لأننا الآن سنتكلم عن معالجة الأخطاء

00:27:01.400 --> 00:27:06.800
إذن الأخطاء البنيوية تمنع الكود من التنفيذ حتى تقوم بتصحيحها 

00:27:06.800 --> 00:27:09.800
وتصحيحها أسهل لأن رسالة الخطأ تخبرك بمكان الخطأ 

00:27:09.800 --> 00:27:17.000
أما الأخطاء البرمجية فرغم أنها تسمح لك بتنفيذ الكود إلا أنه يتوقف عند الوصول للسطر الذي يوجد به الخطأ

00:27:17.000 --> 00:27:23.400
وهذا النوع من الأخطاء يُمكننا معالجته في بايثون باستخدام تعبير "تراي /إكسبيكت"

00:27:23.440 --> 00:27:29.000
 بحيث حتى لو حصل الخطأ أثناء التشغيل لن يؤثر ذلك على سير البرنامج ، ويكتب التعبير بهذه الطريقة

00:27:29.242 --> 00:27:35.800
هنا أي كود سنكتبه داخل العبارة try  لن يتسبب في إيقاف البرنامج ولا في ظهور رسالة الخطأ

00:27:35.800 --> 00:27:41.000
بل سينتقل البرنامج تلقائيا عند الخطأ إلى تنفيذ الكود الموجود داخل عبارة except 

00:27:41.400 --> 00:27:51.000
كما ترى لم يحصل أي خطأ رغم أننا استخدمنا متغير b الذي لم نقم بتعريفه من قبل ، لنُعد تجربة الكود بدون try /except  .

00:27:51.000 --> 00:27:54.000
لاحظ معي، لقد ظهر خطأ من نوع NameError

00:27:54.000 --> 00:27:59.000
 هذا هو ما يسمى الإسثناء Exceptions . إذن يمكننا كتابة الكود السابق بالشكل التالي

00:27:59.000 --> 00:28:03.000
هنا سيقول سائل لماذا كتبت إسم الإستثناء بجانب "إكسبيكت"

00:28:03.000 --> 00:28:11.000
السبب يا صديقي هو أنه أثناء كتابة كود يَحتمِل حصول أكثر من خطأ ستريد تخصيص  "إكسبيكت" مختلف لكل خطأ بالشكل التالي

00:28:13.411 --> 00:28:15.411
إذن عزيزي المبرمج ، عزيزتي المبرمجة

00:28:16.039 --> 00:28:23.000
أسماء الأخطاء يمكنكم الحصول عليها من رسائل الخطأ ويمكنكم استخدامها كاستثناءات للتعامل مع هذه الأخطاء

00:28:23.311 --> 00:28:26.200
بالإضافة إلى عبارتي "تراي" و  "إكسبيكت" هناك

00:28:26.225 --> 00:28:31.280
عبارة "فاينالي : التي سيتنفذ الكود الذي بداخلها سواء عند الخطأ أو لا .

00:28:31.319 --> 00:28:36.800
وعبارة "إيلز" : التي سيتنفذ الكود الموجود بداخلها في حالة عدم ظهور أي خطأ 

00:28:36.800 --> 00:28:40.800
بالنسبة للأخطاء المنطقية يمكنك تفاديها بطريقة واحدة

00:28:40.800 --> 00:28:47.800
ألا وهي قراءة الكود بطريقة صحيحة ومحاولة التفكير في السيناريوهات المختلفة للمستخدم

00:28:47.800 --> 00:28:50.800
لأن هذا النوع من الأخطاء هو ما يعرف عند الهاكرز بالثغرات 

00:28:53.891 --> 00:28:56.880
تثبيت المكتبات
(Libraries Installation

00:28:57.451 --> 00:29:00.440
المكتبات في لغة بايثون تعتبر ميزة قوية جداً 

00:29:00.440 --> 00:29:04.440
كما أنها تضيف الكثير من الخصائص الجديدة للغة

00:29:04.440 --> 00:29:07.800
 ولدينا في بايثون مكتبات لأي شيء سيخطر على بالك

00:29:07.800 --> 00:29:16.440
المكتبات هي نوع من الإضافات يمكنك تثبيتها متى شئت باستخدام مُدير الحُزم "بيب" الذي يأتي مع النسخ الحالية من بايثون  

00:29:16.440 --> 00:29:23.440
لا أريد أن أتطرق إلى كيفية تثبيت الحُزم على "جوجل كولاب" أو على "بايدرويد"  فذلك ليس عملي نهائياً

00:29:23.440 --> 00:29:27.400
 سنعود إلى بيئة تطوير حقيقية و سنستخدم الفيجوال ستوديو كود 

00:29:27.800 --> 00:29:32.440
أول شيء يجب أن تضعه في بالك هو أننا لا نقوم بتثبيت المكتبات في بيئة التطوير

00:29:33.129 --> 00:29:38.120
عملية التثبيت تتم في الجهاز باستخدام شاشة الأوامر "سي إم دي"  أو  "تيرمينال"

00:29:38.120 --> 00:29:39.800
 حسب النظام الذي تستخدمه 

00:29:40.105 --> 00:29:44.800
إذن لنفترض أن المكتبة التي نريد البحث عنها و تثبيتها هي إحدى المكتبات 

00:29:44.800 --> 00:29:48.920
التي ستمكننا من تحويل التاريخ الميلادي إلى الهجري والعكس

00:29:48.920 --> 00:29:52.080
سنذهب إلى الفهرست الخاص بالمكتبات بايبي دوت أورغ 

00:29:52.795 --> 00:29:56.760
وسنبحث عن كلمة هجري ، سنختار إحدى الحزم ، كما ترى هذه صفحة

00:29:57.389 --> 00:29:59.160
وبالإعلى يوجد أمر تثبيت المكتبة

00:29:59.428 --> 00:30:06.400
ما عليك إلا نسخه ثم وضعة في مُوجّه الأوامر أو الـ كومند برومت" الخاص بجهازك وانتظار تثبيت الحزمة"

00:30:06.400 --> 00:30:10.400
حسنا تم تثبيت الحزمة ولكننا لا نعرف طريقة استخدامها

00:30:10.400 --> 00:30:16.400
لهذا سنتوجه إلى صفحة المكتبة ثم ندخل على صفحة الجيت هب الخاصة بها ، ثم نقوم بنسخ المثال

00:30:16.400 --> 00:30:19.320
أولاً هذه تعليمة استيراد المكتبة 

00:30:19.320 --> 00:30:23.400
ثانيا هذه طريقة تحويل التاريخ من الهجري إلى الميلادي

00:30:23.400 --> 00:30:25.400
 سنقوم بتجربتها ، جميل إنها تعمل 

00:30:26.000 --> 00:30:31.000
الوظيفة الأخرى هي تحويل التاريخ الميلادي إلى الهجري سنقوم بتجربتها أيضا .

00:30:31.200 --> 00:30:35.200
هذه المكتبة ستبقى في جهازنا ولن نحتاج إلى تثبيتها كل مرة 

00:30:35.400 --> 00:30:41.000
ولكن لاستخدامها كل مرة يجب علينا استيرادها عبر كتابة تعليمة الإستيراد الموجودة في أعلى الكود

00:30:42.200 --> 00:30:47.200
من المعلوم أيضا أن بايثون تحتوي على مكتبات مُضمنة بداخلها لا تحتاج إلى تثبيت

00:30:47.400 --> 00:30:55.000
كل ما عليك هو استيرادها ، على سبيل المثال هنا سنقوم باستيراد مكتبة راندوم  لطباعة رقم عشوائي يقع بين 0 و 9 

00:30:55.200 --> 00:31:02.400
أخيراً في لغة بايثون أي مبرمج يستطيع إنشاء حزمة أو مكتبة خاصة به تم استيرادها في الكود

00:31:02.400 --> 00:31:05.600
 فالحُزَم ليست سوى أكواد بايثون في ملفات مستقلة

00:31:05.600 --> 00:31:10.600
ما يمكن لأي شخص أن يقوم بإنشاء أي حزمة يريدها ورفعها لمدير الحزم

00:31:10.600 --> 00:31:15.400
وبذلك سيتمكن أي شخص آخر في العالم من تثبيتها واستخدامها 

00:31:15.400 --> 00:31:20.000
لا أنصحك بفعل ذلك قبل أن تتقن لغة بايثون فهذا الأمر الآن لن يفيدك

00:31:20.225 --> 00:31:26.200
إذا كنت تريد تعلم الطريقة ،هذا الفيديو يشرح كل شيء عن إنشاء الحُزم ، سأضع لك الرابط في صندوق الوصف .

00:31:26.865 --> 00:31:33.840
التمرين الخاص بهذه المرحلة هو تثبيت واستخدام هذه المكتبات التي ستظهر أسماءها أمامك الآن .

00:31:41.800 --> 00:31:45.120
قبل أن ننتقل إلى المرحلة التالية نُحب أن نرُد على بعض الشائعات

00:31:45.808 --> 00:31:50.400
الشائعة الأولى : لغة بايثون لغة جديدة ولا تتمتع بالنضج الكامل ؟

00:31:50.400 --> 00:31:53.000
لا أعرف ما الذي يدفع الناس إلى هذا الإعتقاد

00:31:53.000 --> 00:31:58.400
سأخبركم بمعلومة قد تفاجئ أغلبكم : لغة بايثون أقدم من لغة الجافا 

00:31:58.400 --> 00:32:03.800
والجافاسكريبت والبي اتش بي بخمس سنوات ، وأقدم من لغة السي شارب بعشر سنوات 

00:32:03.800 --> 00:32:11.000
ولا أعرف أيضاً السبب الذي يجعل الناس يتخيلون بايثون كأنها فتاة جميلة بينما يتخيلون لغة الجافا على شكل عجوز مُسنّة

00:32:12.003 --> 00:32:16.000
الشائعة الثانية :لغة بايثون لا تصلح لشيء لأنها لغة بطيئة !

00:32:16.153 --> 00:32:22.120
هذا السؤال يطرحه غالبا أشخاصٌ لم يسبق لهم العمل على مشاريع تتطلب الأداء العالي

00:32:22.120 --> 00:32:27.800
 أما الواقع فيقول بأن أكثر مجال يحتاج لغة برمجةٍ عالية الأداء هو التعلم العميق

00:32:27.800 --> 00:32:34.120
ولغة بايثون قد أكلت هذا المجال لدرجة أن التعلم الآلي لا يكاد يُذكر حتى تُذكر بايثون

00:32:34.120 --> 00:32:36.120
إذن هل لغة بايثون بطيئة ؟

00:32:36.951 --> 00:32:42.400
هي ليست لغة بطيئة ولكنها ليست أسرع من أمها لغة السي ولا السي ++ طبعا

00:32:42.400 --> 00:32:46.400
ولكن مع كل نسخة جديدة من بايثون تزداد اللغة كفاءةً وأداءً 

00:32:46.870 --> 00:32:49.840
وأجهزة  الحاسب لم تعُد ضعيفةً اليوم مثل التسعينات

00:32:49.840 --> 00:32:54.840
فقد أصبحت الأولوية اليوم للإنتاجية وقابليةِ الكود للصيانة والتطوير

00:32:54.840 --> 00:32:59.400
وقد إنتهينا بحمد الله من الخطوة الأولى في طريقك للإحتراف

00:32:59.400 --> 00:33:06.840
أقترح عليك هذا الكتاب الذي يُعتبر الأفضل عالمياً لمن يريد بناء أساس قوي في البرمجة بشكل عام

00:33:06.840 --> 00:33:10.800
 وفي لغة بايثون بشكل خاص ، كتاب بايثون كراش كورس

00:33:11.133 --> 00:33:19.120
كما أقترح عليك أيضاً هذا الكتاب الممُتع  "أوتومايشن

00:33:23.743 --> 00:33:27.720
يمكنك تصفح نسخته الإلكترونية مجاناً على الموقع الخاص به

00:33:27.720 --> 00:33:31.720
 كما يمكنك الإطلاع على سلسلة الفيديو الخاصة به هنا على اليوتيوب 

00:33:31.720 --> 00:33:36.720
أؤكد لك أنه كتاب ممتع وخفيف على القلب ، أنصح به بشدة .
 

00:33:36.720 --> 00:33:40.000
في أول فصل طلبت منك أن لا تركز على مصدر واحد 

00:33:40.000 --> 00:33:48.720
أتمنى أن تتصفح اليوتيوب وتبحث عن كل درس على حِدة لأنه توجد مجموعة رائعة من القنوات العربية التي تقدم دروس مفصلة

00:33:48.720 --> 00:33:51.000
 تلك القنوات تستحق كل الدعم والتشجيع

00:33:57.645 --> 00:33:59.645
في الخطوة الأولى تطرقنا لأهم الأساسيات 

00:33:59.960 --> 00:34:01.960
وقد كنتُ معك أو معكِ بمثابة المُدرّس

00:34:02.243 --> 00:34:05.240
هنا في الخطوة الثانية وجودي معك سيقتصر على التوجيه

00:34:05.945 --> 00:34:11.400
وأعدك أنني سأحاول أن أكون مفيداً بقدر الإمكان وسأبذل لك النصح بكل أمانة

00:34:12.944 --> 00:34:17.920
أولاً الخوارزميات 
(Algorithms)

00:34:19.006 --> 00:34:20.800
السؤال الذي يكرر نفسه دائما 

00:34:20.800 --> 00:34:24.000
أيهما أتعلم أولاً : البرمجة أم الخوارزميات ؟

00:34:24.539 --> 00:34:27.800
قد أجبنا عنه سابقاً وقلنا : لا أحد منهما سابق للآخر

00:34:27.800 --> 00:34:32.520
ومازلنا نؤكد على ضرورة تعلّم الخوارزميات أثناء تعلمك للبرمجة 

00:34:32.600 --> 00:34:37.680
فإنك ستصل إلى نقطة معينة ستعرف فيها أن البرمجة ليست سوى خوارزميات

00:34:37.754 --> 00:34:45.000
وكل كودٍ ستكتبه هو عبارة عن خوارزمية 
ولأن عِلم الخوارزميات بحر شاسع فقد أفردنا سلسلة له في قناتنا

00:34:45.517 --> 00:34:50.480
يمكنك متابعة حلقاتها الثلاث الأولى لتتعرف على المفاهيم الأساسية للخوارزميات

00:34:50.772 --> 00:34:54.000
 ويمكنك تفعيل الجرس ليصل جديدها أول بأول

00:34:54.000 --> 00:35:01.000
بعد مشاهدة الحلقات الأولى من سلسلة الخوارزميات سأطلب منك أن تتعلم كل ما تستطيع عن خوارزميات البحث والفرز

00:35:02.330 --> 00:35:08.000
 ليس لأهميتها وحاجتك إليها فقط، بل لأنها تفتح لك آفاقاً جديدة للتفكير

00:35:08.200 --> 00:35:12.640
إذن كيف يمكنك تعلم هذه الخوارزميات ، وما هي أفضل طريقة ؟

00:35:12.801 --> 00:35:16.400
شخصياً سأنصحك  بهذا الكتاب "كروكين ألغوريتمز

00:35:16.400 --> 00:35:20.400
لأنه يتّسم بالبساطة ويقدم لك ما تحتاج بالضبط

00:35:20.934 --> 00:35:26.600
ولكن سيرا على القاعدة التي قررناها في بداية الفيديو يمكنك الذهاب إلى اليوتيوب

00:35:26.600 --> 00:35:30.400
وإستخدام البحث لأنك ستجد الكثير من المقاطع التعليمية القوية

00:35:30.718 --> 00:35:32.718
سواء بالعربي أو بالأجنبي

00:35:32.957 --> 00:35:36.400
أو إذا كنت من عشاق الكورسات الشاملة يوجد كورس

00:35:36.400 --> 00:35:40.400
Python 3: Project-based Python, Algorithms, Data Structures

00:35:40.863 --> 00:35:42.000
 على يوديمي

00:35:42.000 --> 00:35:46.000
وهو كورس مدفوع بالمناسبة ولكن يمكنك البحث عن كوبونات التخفيض

00:35:46.392 --> 00:35:51.360
 التي تصل أحيانا إلى 100% للحصول عليه مجانا أو بـ 10 دولار على الأقل

00:35:54.832 --> 00:35:58.800
ثانياً البرمجة الشيئية 
( Object Oriented Programming )

00:35:59.201 --> 00:36:03.200
يطلق عليها أيضاً البرمجة كائنية التوجُّه أو كائنية المنحى

00:36:03.200 --> 00:36:06.200
وهي مجرد بارادايم أو أسلوب متقدم لتنظيم الشيفرة

00:36:06.780 --> 00:36:10.000
يقسم فيه البرنامج إلى وحدات تسمى كائنات

00:36:10.000 --> 00:36:15.000
وكل كائن هو عبارة عن حزمة من البيانات والوحدات لها وظائفها وطرقها

00:36:15.000 --> 00:36:23.200
هذا النمط أو الأسلوب من البرمجة  تكون فيه أجزاء الشّيفرة منظمة داخل دوال تُسمّى التوابع "ميثودس

00:36:23.200 --> 00:36:26.800
ويتم تنظيم كل هذا داخل أصناف تسمى كلاسات

00:36:26.800 --> 00:36:30.000
وبالتالي عند إنشاء كائن من صنف "كلاس" معين

00:36:30.048 --> 00:36:35.000
فإنّه يمكنك أن تُنفذ عليه كل الوظائف والخصائص الموجودة داخل توابع الكلاس

00:36:35.281 --> 00:36:37.281
إذا لم تستوعب الفكرة ب عد لا تقلق

00:36:37.533 --> 00:36:41.000
 وركز معي على طريقة إنشاء الكلاسات في بايثون التي تتم عبر كتابة 

00:36:41.400 --> 00:36:46.800
تعبير قسم  وإتباعه باسم الكلاس نقطتي وعودة لأول السطر ولا تنسى الإزاحة

00:36:46.800 --> 00:36:50.800
إذن هذا الكلاس ، وبداخله يمكنك وضع كل توابعه بهذا الشكل

00:36:50.800 --> 00:36:54.800
كما ترى يمكننا تعريف المتغيرات داخل الكلاس بطريقة بسيطة

00:36:54.809 --> 00:37:00.400
ولكن جميع التوابع يجب أن تُعرّف مع البارامتر سالف وجوباً كما فعلنا مع الدالة ماي مثود 

00:37:00.400 --> 00:37:05.200
إذن للوصول إلى متغيرات الكلاس أو لإستدعاء توابعه نستخدم هذه الطريقة

00:37:05.200 --> 00:37:07.000
أو بشكل أوضح الطريقة التالية

00:37:09.800 --> 00:37:14.080
إلى هنا ستكون قد فهمت بعض أساسيات البرمجة الكائنية بشكل سطحي جداً

00:37:14.374 --> 00:37:19.000
أدعوك إلى متابعة سلسلة المقالات التي نشرتها أكاديمية حسوب 

00:37:19.000 --> 00:37:23.000
 فهي أفضل مادة عربية تطرقت للموضوع حسب علمنا 

00:37:23.000 --> 00:37:25.000
سأضع لكم الرابط في صندوق الوصف

00:37:25.372 --> 00:37:31.360
وإذا أردت مواد عربية مرئية تشرح المفهوم فما عليك سوى فتح اليوتيوب وكتابة البحث التالي

00:37:31.360 --> 00:37:33.360
البرمجة الكائنية "أو أو بي" بايثون

00:37:34.141 --> 00:37:39.120
أعتقد أنك ستجد مواد جيدة ، إلا أنك إن كنت تبحث عن كورس جيد فعليك بكورس

00:37:39.758 --> 00:37:41.758
Python Classes and Inheritance

00:37:41.758 --> 00:37:44.720
الذي تقدمه جامعة ميشغان على منصة كورسيرا

00:37:47.492 --> 00:37:51.200
ثالثا البرمجة المتوازية
( Parallel programming

00:37:52.864 --> 00:37:59.000
البرمجة المتوازية في أبسط تعريفاتها هي الإستخدام المتزامن لموارد العتاد البرمجي

00:37:59.000 --> 00:38:04.200
 من "سي بي يو" و "جي بي يو" وغيرهما لتنفيذ كود أو شفرة برمجية معينة

00:38:04.200 --> 00:38:09.000
عبر تقسيمها إلى أجزاء/تعليمات منفصلة يمكن تنفيذها في وقت واحد 

00:38:09.000 --> 00:38:13.000
 أي جعل برنامجك يقوم بتنفيذ دالتين أو أكثر في نفس الوقت

00:38:13.000 --> 00:38:18.400
 والخروج عن النمط التقليدي للبرمجة المتسلسلة التي يتم فيها تنفيذ الدوال على التوالي

00:38:18.400 --> 00:38:23.000
ليتضح المعنى أكثر إليك هذا المثال الذي سنقوم فيه بعمل دالة لتحميل الصور

00:38:24.199 --> 00:38:28.600
هذه الدالة ستأخذ متغيرين : الأول هو عنوان الصورة

00:38:28.600 --> 00:38:32.600
 الثاني نايم  وهو الإسم الذي ستحفظ به الصورة في الجهاز

00:38:32.600 --> 00:38:37.800
 وسوف نستخدم مكتبة البرمجة المتوازية ملتي بروسيسينغ لتحميل الصور بشكل متوازي

00:38:37.800 --> 00:38:40.400
أول شيء نقوم باستيراد المكتبات اللّازمة

00:38:40.400 --> 00:38:47.400
واستخدمنا مكتبة  راندوم لتوليد أرقام عشوائية لتسمية الصور التي سيتم تحميلها بها (تفاديا للأخطاء

00:38:47.759 --> 00:38:51.000
بعد استيراد المكتبات سنقوم بتعريف دالة التحميل 

00:38:51.000 --> 00:38:58.200
داخل دالة download  إستخدمنا urllib لتحميل الملف من الأنترنت باستخدام العنوان URL

00:38:58.200 --> 00:39:05.000
وتسميته برقم عشوائي بين 0 و 444 ثم أضفنا  نوع الملف ” ج.ب.ج ” إليه

00:39:05.729 --> 00:39:11.720
أضفنا متغير جديد ياسم urls وهو عبارة عن قائمة بعناوين الصور المراد تحميلها 

00:39:12.345 --> 00:39:17.800
الآن وصلنا إلى مرحلة تنفيذ الدالة download على محتويات القائمة urls بالتوازي

00:39:17.800 --> 00:39:22.320
قمنا بتعريف عدد عمليات التوازي في الـ بوول وهي عبارة عن 3

00:39:22.320 --> 00:39:29.320
ثم  قمنا باستدعاء نسخة من الدالة download مع كل عنصر من عناصر القائمة urls بالتوازي

00:39:29.806 --> 00:39:31.806
وأعدنا القيم المرجعة من الدالة 

00:39:31.806 --> 00:39:33.806
كما ترى نجح معنا الأمر

00:39:33.962 --> 00:39:42.400
ففي البرمجة التسلسلية فإن ما سيحصل هو أن يقوم البرنامج بانتظار الصورة الأولى حتى تتحمل ثم يذهب لتحميل الصورة التي تليها

00:39:42.400 --> 00:39:47.400
أما في البرمجة المتوازية فإن البرنامج سيقوم بتحميل كل الصور في نفس الوقت

00:39:48.163 --> 00:39:53.160
لكي تتعلم أكثر عن هذا المفهوم يجب تعلم مكتبتي "ميلتي بروسيسين" و "ميلتي تريدين" 

00:39:53.717 --> 00:39:57.000
وهما موجودتان في لغة بايثون ولن تحتاج إلى تثبيتهما

00:39:57.328 --> 00:40:01.000
أما إذا أردت التعمق أكثر فأنصحك بالقراءة عن البرمجة اللّامتزامنة 

00:40:01.312 --> 00:40:05.800
حيث أنها تعتبر من أقوى وأحدث أساليب المعالجة المتوازية 

00:40:05.800 --> 00:40:11.000
كونها قابلة للجمع بين مسارات التنفيذ-الخيوط ، و تعدد المُعالِجات 

00:40:11.932 --> 00:40:17.320
البرمجة اللامتزامنة يمكن استخدامها في لغة بايثون عن طريق مكتبة "أيسن كايو" 

00:40:17.320 --> 00:40:20.000
لذا عليك تعلم هذه المكتبة إن كنت مهتم

00:40:20.070 --> 00:40:26.400
أخيراً أقترح عليكم  مشاهدة هذا الفيديو الذي يشرح فيه "كوري شافر" أساسيات مكتبة "ميلتي بروسيسين"

00:40:26.400 --> 00:40:27.400
أو درس 

00:40:27.629 --> 00:40:31.320
Demystifying Python's Async and Await Keywords

00:40:31.669 --> 00:40:35.640
الذي قدمته قناة "جت برين تيفي" : الروابط سأضعها في الوصف

00:40:35.790 --> 00:40:37.790
وصلنا إلى نهاية الخطوة الثالثة

00:40:37.949 --> 00:40:39.949
 نرجوا أن لا نكون قد أطلنا وأثقلنا عليكم

00:40:40.769 --> 00:40:44.400
النصيحة التي سأشدد عليها هنا هي لا يهم المصدر

00:40:44.650 --> 00:40:48.400
ركز على الدرس وابحث عن أي شخص يشرحه بشكل يناسبك 

00:40:48.400 --> 00:40:52.000
هذه المهارة ستنقذ مستقبلك فحاول التركيز على تنميتها

00:40:54.081 --> 00:40:58.080
الخطوة التالثة :شحذ المهارات

00:40:58.988 --> 00:41:03.400
ي هذه الخطوة سأقدم لك 4 نصائح ثمينة لشحذ مهاراتك في البرمجة 

00:41:03.400 --> 00:41:11.400
هذه النصائح إن تجاهلتها ربما ستضيع كل ما تعلمته في السابق ولن تترسخ لديك المعرفة الكافية للإحتراف بشكل جيد

00:41:11.611 --> 00:41:13.611
أولاً : تعلّم جيت وجيت هب

00:41:13.976 --> 00:41:18.400
أنشئ حساب جديد على "كيت هاب"  وحاول أن تتعلم إستخدام "كيت"

00:41:18.575 --> 00:41:20.575
 مع محرر الشيفرة الذي تستخدمه

00:41:20.906 --> 00:41:24.400
جيتهب يسمح لك بمشاركة الأكواد والتعاون مع أصدقائك

00:41:24.400 --> 00:41:29.400
 كما يسمح لك أيضا بحفظ مشاريعك من الضياع أو العودة إلى نسخ سابقة منها متى شئت 

00:41:29.400 --> 00:41:31.400
ثانياً :حلل أكود الآخرين

00:41:32.020 --> 00:41:36.400
وأنت تتصفح مشاريع وأكواد زملائك المبرمجين على جيت هب ، تأملها 

00:41:36.400 --> 00:41:41.000
حاول فهمها باستخدام مهارة التحليل لديك ، ستكتشف طرق جديدة للتفكير

00:41:41.297 --> 00:41:44.000
ثالثا :إستثمر ما تعلمت في مشروع صغير

00:41:44.000 --> 00:41:51.800
هذه هي أهم نصيحة سيقدمها لك أي أحد هنا ، إختر مشروع صغير وحاول تنفيذه من الأول للأخير

00:41:51.800 --> 00:41:54.000
رابعاً : شارك المعرفة مع الآخرين

00:41:54.393 --> 00:41:56.393
يقال أن زكاة العلم بذلُه لمن يحتاجه 

00:41:57.018 --> 00:42:02.000
 والمعرفة كلما شاركتها مع الآخرين تزداد ترسخا لديك وستشعر بالرضى عن نفسك

00:42:03.662 --> 00:42:05.662
الخطوة الرابعة :التخصص

00:42:06.853 --> 00:42:10.400
حان الوقت لدفع الطائر من العش ، عزيزي ، عزيزتي

00:42:10.400 --> 00:42:14.400
عند وصولك إلى هذه المرحلة ستكون قادراً على الإكمال بمفردك 

00:42:15.130 --> 00:42:18.800
أثق بذلك رغم أنني أعلم أن الأمر ليس بالسهل أو الهين

00:42:18.800 --> 00:42:22.800
 ففي الماضي القريب كان همك الوحيد هو : كيف وماذا أتعلم ؟

00:42:23.137 --> 00:42:26.800
الآن أنت بمفترق الطرق والسؤال الذي أصبح يؤرقك هو

00:42:27.122 --> 00:42:29.122
ماذا أفعل بما تعلمت ؟

00:42:29.122 --> 00:42:31.122
هنا يجب أن تحدد أولاً ماذا تريد 

00:42:31.899 --> 00:42:32.800
 ما هو شغفك ؟ 

00:42:32.800 --> 00:42:34.400
في أي مجال تريد أن تتخصص

00:42:34.817 --> 00:42:39.800
لمساعدتك هذه أهم 5 تخصصات يمكنك استخدام بايثون فيها

00:42:40.016 --> 00:42:41.400
علم البيانات 

00:42:41.683 --> 00:42:45.000
حيث يلتقي كل شيء متعلق بالبيانات مع الذكاء الإصطناعي

00:42:45.000 --> 00:42:50.600
ولدينا بالمناسبة خطة كاملة لتعلم الذكاء الإصطناعي يمكنك الإطلاع عليها 

00:42:50.600 --> 00:42:52.000
تطوير الويب

00:42:52.000 --> 00:42:56.000
وهو المجال الذي نقوم فيه ببناء تطبيقات ومواقع الأنترنت

00:42:56.513 --> 00:43:01.480
هنا يجب أن تتجه لتعلم إحدى أطر الويب الخاصة ببايثون كـ "دجانكو" أو "فلاسك"

00:43:02.001 --> 00:43:03.000
الشبكات والحماية 

00:43:03.589 --> 00:43:08.000
وهو مجموعة من التخصصات تتعلق بإنشاء وصيانة الشبكات وحمايتها

00:43:08.000 --> 00:43:12.000
وهذا يندرج ضمنه ما يسمى بإختبارات الإختراق والهاكر الأخلاقي

00:43:12.932 --> 00:43:14.932
برمجة الأنظمة المدمجة والروبوت

00:43:15.448 --> 00:43:21.000
وهي القطع الإلكترونية الدقيقة القابلة للبرمجة مثل الراسبيري باي والمايكروكونترولز

00:43:21.000 --> 00:43:22.400
أنترنت الأشياء

00:43:23.025 --> 00:43:28.000
وهي تلك الشبكة أو ذلك النظام الذي يسمح للأجهزة الصغيرة للتواصل والعمل مع بعضها

00:43:29.000 --> 00:43:31.000
كما يحصل في البيوت الذكية 

00:43:31.622 --> 00:43:37.600
بكل تأكيد لا يُمكن حصر التخصصات الموجودة فما ذكرناه ليس سوى غيض من فيض

00:43:37.749 --> 00:43:40.720
وكل تخصص من هذه التخصصات التي أشرنا إليها

00:43:41.024 --> 00:43:44.400
يمكن أن يتفرع لعشراتٍ من التخصصات الأخرى 

00:43:44.400 --> 00:43:50.000
إذا لم تتبين لك معالم الطريق الذي ستسلكه بعد فعليك أن تعطي المزيد من الوقت لنفسك

00:43:50.000 --> 00:43:57.000
داخل الخطوة الرابعة لأنك وأنت تتصفح مشاريع الآخرين ستتعرف بكل تأكيد على تخصصات جديدة

00:43:58.014 --> 00:44:01.400
إذا قمت باختيار تخصصك فهذا يعني بداية طريق جديد

00:44:01.400 --> 00:44:02.400
طريق الإحتراف

00:44:02.400 --> 00:44:07.400
وسيجب عليك أن تبحث بنفسك عن كل ما تحتاج إليه لإتقان هذا التخصص

00:44:07.759 --> 00:44:12.720
مستعينا بأفضل الكورسات المتوفرة في الأنترنت أو بتخصصك الجامعي

00:44:12.720 --> 00:44:17.000
 كما يجب عليك دراسة التخصص بشكل جاد والحصول على شهادة فيه

00:44:17.000 --> 00:44:23.000
 من أحد الكلاسات الموجودة على موقع كورسيرا أو " إيديكس" أو أي جهة تقدم شهادات معترف بها

00:44:23.779 --> 00:44:30.400
عموما نحن كمجتمع بايثون العربي سنحاول تخصيص المزيد من خرائط الطريق لأهم التخصصات في العالم

00:44:30.699 --> 00:44:32.699
كما فعلنا مع تخصص الذكاء الإصطناعي

00:44:32.985 --> 00:44:37.800
إذا كنت تعتقد أن هذه المادة التي نقدمها مفيدة بأي شكل من الأشكال

00:44:37.800 --> 00:44:44.000
 يمكنك دعمنا عبر إرسال هذه الحلقة لإصدقائك أو نشرها على وسائل التواصل

00:44:44.000 --> 00:44:46.400
كما يمكنك دعم هذا البرنامج عبر باتريون 

00:44:47.065 --> 00:44:51.000
 والتكفل بإنتاج حلقات جديدة لنتقاسم معاً أجر نشر المعرفة

00:44:51.000 --> 00:44:53.387
كان معكم رحال من مجتمع بايثون العربي

00:44:53.721 --> 00:44:57.720
وهذه كانت أطول حلقة صورناها في تاريخ البرنامج 

00:44:57.996 --> 00:44:59.400
 شكرا جزيلاً على الدعم

00:44:59.630 --> 00:45:06.600
سنكون بانتظار تعليقاتكم والسلام ورحمة الله

