WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:06.640
بهذا الفيديو راح أشوفكم شلون خليت الذكاء الاصطناعي، يفوز بلعبة الثعبان من خلال استخدام خوارزميات تحديد المسار

00:00:07.200 --> 00:00:11.560
أنا سبق أن برمجت لعبة الثعبان وكان دربتها باستخدام خوارزمية جينية

00:00:11.760 --> 00:00:15.680
لكن هذه المرة هدفي هو أنه أخلي الثعبان يملأ سطح اللعبة بالكامل

00:00:16.080 --> 00:00:18.680
بحيث ياكل كل التفاحات اللي ممكن أنه ياكلها

00:00:18.940 --> 00:00:23.980
فأخذت الكود القديم اللي كتبته، ونظفته وعملت عليه تغييرات في التصميم والألوان

00:00:24.140 --> 00:00:29.480
وبعدها، بدأت أفكر وأدرس وأشوف مشاريع مشابهة لإيجاد حل لهذه المشكلة

00:00:29.800 --> 00:00:32.280
فتوصلت إلى آلية لعب كانت كالتالي:

00:00:32.560 --> 00:00:37.780
راح أستخدم خوارزمية Breadth-first search لإيجاد المسار الأقصر ما بين رأس الثعبان والتفاحة

00:00:38.340 --> 00:00:43.000
وراح أنشئ ثعبان وهمي بنفس مواصفات الثعبان الأصلي، وأخليه يتبع هذا المسار

00:00:43.520 --> 00:00:45.520
بعد ما يوصل الثعبان الوهمي التفاحة

00:00:45.820 --> 00:00:49.920
راح أختبر المسار ما بين رأس الثعبان الوهمي، وذيل الثعبان الوهمي

00:00:50.220 --> 00:00:55.560
إذا كان المسار متوفر، معناها المسار الأول آمن وهو راح يكون مسار الثعبان الأصلي

00:00:56.340 --> 00:00:58.880
أما إذا كان غير متوفر (مثل هذه الحالة)

00:00:59.320 --> 00:01:01.720
فراح أخلي الثعبان الأصلي يتبع الذيل الخاص بيه

00:01:02.060 --> 00:01:06.940
فبرمجت طريقتين ممكن يتبع من خلالهم الذيل حتى تكون حركة الثعبان متنوعة أكثر

00:01:07.120 --> 00:01:11.980
الطريقة الأولى هي من خلال اختيار المسار الأطول ما بين رأس الثعبان، وذيل الثعبان

00:01:12.480 --> 00:01:16.120
والطريقة الثانية هي من خلال اختيار مسار بحركات عشوائية آمنة

00:01:16.420 --> 00:01:18.960
بحيث يكون الطريق متوفر بين الرأس والذيل

00:01:19.560 --> 00:01:22.040
والآن راح أشوفكم النتيجة النهائية لهذا المشروع

00:03:10.880 --> 00:03:14.500
أتمنى أنه تشاركوا هذا الفيديو مع أصدقائكم، وتفعلوا خيار الجرس

00:03:14.740 --> 00:03:16.000
وشكرا الكم على المتابعة

