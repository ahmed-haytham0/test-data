WEBVTT
Kind: captions
Language: ar

00:00:08.440 --> 00:00:12.000
ما هيَ الأخطاءُ التي يقعُ بها المطورونَ في بدايةِ طريقهم؟

00:00:12.680 --> 00:00:15.460
وكيفَ يُمكننا التعرفُ على مكانِ الخطأ؟

00:00:15.860 --> 00:00:20.400
وما هيَ قواعِدُ كتابةِ الأسطرِ البرمجيةِ بلغةِ السي شارب؟

00:00:21.160 --> 00:00:25.780
وكيفَ يُتيحُ برنامجُ الـ Visual Studio المساعدةَ في ذلك؟

00:00:26.240 --> 00:00:29.500
هذا ما سوفَ نتعرفُ عليهِ في هذا الدرس

00:00:29.700 --> 00:00:31.680
بعدَ الفاصلِ إن شاء الله

00:00:40.600 --> 00:00:43.480
السلامُ عليكم ورحمةُ اللهِ وبركاته

00:00:43.680 --> 00:00:48.420
وأهلاً وسهلاً بكمْ في سلسلةِ تعلمِ دروس البرمجة

00:00:48.560 --> 00:00:52.500
كما أني أخطأتُ في نطقِ ترتيبِ اسمِ السلسلةِ في المقطعِ السابق

00:00:52.760 --> 00:00:57.420
هناكَ أخطاءٌ شائعةٌ يقعُ بها المطورونَ في بدايةِ طريقِهمْ

00:00:58.200 --> 00:01:01.340
سنقومُ في هذا الدرسِ بالتَّعرفِ على أهمِّا

00:01:02.120 --> 00:01:05.160
وستكونُ أيضاً فرصةً ممتازةً لكَ

00:01:05.220 --> 00:01:11.860
لتتعلمَ بعضاً منْ قواعدِ كتابةِ الأسطرِ البرمجيَّةِ الخاصةِ بلغةِ الـ #C

00:01:13.080 --> 00:01:15.600
فكمَا هناكَ قواعدٌ للغةِ العربية

00:01:15.900 --> 00:01:20.380
يُوجدُ أيضاً قواعدٌ للغةِ الـ #C يجبُ الالتزامُ بها

00:01:20.720 --> 00:01:26.240
لذلكَ سأقومُ بإدراجِ أمثلةٍ تحتوي على أخطاءٍ برمجيةٍ

00:01:26.420 --> 00:01:29.960
لنقومَ بحلها ونتعرفَ على قواعدِ هذهِ اللغة

00:01:30.900 --> 00:01:32.900
إنْ حاولتَ تنفيذَ التطبيقِ التَّالي

00:01:33.120 --> 00:01:38.040
ستجدُ رسالةً مُفادُها أنَّ هنالكَ أخطاءً أثناءَ عمليةِ البناءِ

00:01:38.420 --> 00:01:41.360
ويسألُكَ البرنامجُ عمَّا إن كنتَ تريدُ تكرارَ

00:01:41.360 --> 00:01:44.840
أخِرِ مرةٍ كانَ التطبيقُ فيهِ خالياً مِنَ الأخطاءِ

00:01:45.200 --> 00:01:47.400
دائماً اختر لا لهذهِ الرِّسالةِ

00:01:47.700 --> 00:01:51.960
لأنَّنا نهتمُ بالتعديلاتِ الحاليَّةِ لا التعديلاتِ السابقة

00:01:52.500 --> 00:01:55.000
ولو قُمتَ بالنَّظرِ إلى أسفلِ الشَّاشةِ

00:01:55.360 --> 00:01:59.180
ستجدُ قائمةً بالأخطاءِ الموجودةِ Error List

00:01:59.460 --> 00:02:02.560
غالباً سيكونُ محتَوى الرِّسالةِ مفهوماً لكَ

00:02:02.940 --> 00:02:06.820
لكنْ في بعضِ الأحيانِ ستجدُ صُعوبةً في فَهمِهَا

00:02:07.080 --> 00:02:08.820
خصوصاً في مرحلةِ البدايةِ

00:02:10.080 --> 00:02:12.680
أيضاً يُمكنُكَ تحريكُ مؤشرِ الـ Mouse

00:02:12.940 --> 00:02:15.940
على الجملةِ الخاطئةِ في نافذةِ الأسطرِ البرمجيَّةِ

00:02:17.920 --> 00:02:21.520
وستظهرُ لكَ رسالةٌ صغيرةٌ تحتوي على ملخصِ الخطأ

00:02:21.940 --> 00:02:24.800
ليسَ هذا فحسبٌ، بلْ إنَّ برنامجَ الـ Visual Studio

00:02:24.800 --> 00:02:27.960
يساعدُكَ في كثيرٍ منَ الأحيانِ على اكتشافِ موضِعِ الخطأِ

00:02:28.280 --> 00:02:30.740
بوضعِ خطٍ أحمرٍ متعرجٍ تحتَهُ

00:02:31.160 --> 00:02:35.940
وأحياناً يكونُ الخطُ أزرقَ اللونِ أو أخضرَ حسبَ طبيعةِ الخطأِ

00:02:36.540 --> 00:02:39.840
وسنهتمُ حالياً بالخطِ المتعرجِ ذي اللونِ الأحمرِ

00:02:40.100 --> 00:02:43.180
لأنَّهُ دليلٌ على أنَّ هذهِ الجملةَ بالتَّحديدِ

00:02:43.380 --> 00:02:46.940
تحتاجُ اهتمامَكَ لأنَّ فيها شيئاً يجبُ إصلاحُهُ

00:02:47.580 --> 00:02:49.420
فيتَّضحُ في مثالِنَا هذَا

00:02:49.640 --> 00:02:54.800
أنَّ المشكلةَ هيَ أنَّ الأسطرَ البرمجيَّةَ خارجُ نطاقِ الأقواسِ المطلوبةِ

00:02:55.220 --> 00:02:58.440
أو ما يطلقُ عليه اسمُ الـ Code Blocks

00:02:59.120 --> 00:03:03.620
أيْ القطعةُ البرمجيةُ الَّتي تبدأُ بقوسٍ وتنتهِي بقوسٍ آخرَ

00:03:04.060 --> 00:03:08.060
وسنتعرفُ أكثرَ على هذا المصطلحِ في الدُّروسِ المقبلةِ إن شاء الله

00:03:08.500 --> 00:03:09.700
ولإصلاحِ هذا الخطأِ

00:03:09.700 --> 00:03:13.140
يجبُ علينا سحبُ الأسطرِ البرمجيَّةِ

00:03:13.360 --> 00:03:16.120
ووضعُهَا داخلَ المكانِ المخصصِ لها

00:03:23.440 --> 00:03:27.460
بعدَ القيامِ بذلكَ ستجدُ أنَّ التَّطبيقَ أصبحَ خالياً منَ الأخطاءِ

00:03:27.840 --> 00:03:31.800
وبإمكانِكَ تنفيذهُ بدونِ أيِّ مشاكلٍ

00:03:32.440 --> 00:03:36.460
منْ خلالِ المثالِ السَّابقِ تعلمْنَا قاعدةً منْ قواعدِ الـ #C

00:03:36.800 --> 00:03:39.660
ألا وهيَ أنَّ هناكَ اختلافاً في النتيجة

00:03:39.840 --> 00:03:42.780
بناءً على مكانِ كتابةِ الأسطرِ البرمجيَّةِ

00:03:43.700 --> 00:03:49.120
في هذا المثالِ أيضاً نجدُ أنَّ هنالِكَ أخطاءً في نافذةِ Error List

00:03:49.840 --> 00:03:54.260
وهناكَ خطٌ متعرجٌ في نهايةِ السطرِالأول

00:03:55.440 --> 00:04:00.100
عدَا أنَّ رسالةَ الخطأِ هذهِ يمكنُ فهمُ محتواها

00:04:00.520 --> 00:04:03.880
فالرسالةُ تُخبرنَا أنَّنا نسينَا وضعَ

00:04:04.080 --> 00:04:07.900
فاصلةٍ منقوطةٍ semicolon  في نهايةِ الجملةِ

00:04:08.360 --> 00:04:13.000
فكمَا يجبُ أنْ تنتهيَ الجملةُ بعلامةِ ترقيمٍ في قواعدِ اللغاتِ

00:04:13.460 --> 00:04:15.380
فمنْ قواعدِ لغةِ الـ #C

00:04:15.680 --> 00:04:20.160
وضعُ فاصلةٍ منقوطةٍ في نهايةِ كلِّ سطرٍ برمجيٍّ

00:04:26.560 --> 00:04:31.740
وتجدرُ الإشارةُ هنا إلى أنَّهُ إنْ قمتَ بوضعِ الجملتينِ في نفسِ السطرِ

00:04:37.520 --> 00:04:40.240
فلنْ يظهرَ أيُّ خطأٍ برمجي

00:04:40.600 --> 00:04:44.160
لأنَّ كلتا الجملتينِ تنتهيانِ بالفاصلةِ المنقوطة

00:04:44.480 --> 00:04:48.640
وسيقومُ المترجمُ بمعرفةِ أنُهما منفصلتان

00:04:49.120 --> 00:04:51.040
حتى إن كانتا في نفسِ السطر

00:04:51.500 --> 00:04:54.500
ولكنْ منْ بابِ التَّرتيبِ وسهولَةِ القِراءةِ

00:04:54.680 --> 00:04:58.280
فالأفضلُ أنْ نضعَ كلَّ جملةٍ في سطرٍ منفصلٍ

00:05:02.440 --> 00:05:07.260
منَ المثالِ السابقِ تعلمنا القاعدةَ الثانيةَ منْ قواعدِ الـ C#

00:05:07.520 --> 00:05:13.040
هيَ وجوبُ وضعِ فاصلةٍ منقوطةٍ في نهايةِ كلِّ سطرٍ برمجيٍّ

00:05:13.540 --> 00:05:19.020
في هذا المثالِ لمْ يقمِ المترجمُ بالتعرفِ على الكلماتِ الَّتي فوقَ الخطِ المُتعرجِ

00:05:19.920 --> 00:05:24.200
لأنَّهُ اعتبرها كلماتٍ محجوزةً أو مُتغيراتٍ لا نصٍ

00:05:24.880 --> 00:05:30.600
وتعرفنَا سابقاً أنَّهُ لكتابةِ أيِّ نصٍ يجبُ أنْ نضعَهُ بينَ علامتي تنصيصٍ

00:05:30.900 --> 00:05:35.880
لكي نُخبرَ المترجمَ أنَّ هذهِ الجملةَ هيَ جملةٌ نصيَّةٌ

00:05:36.620 --> 00:05:38.500
والرَّجاءُ طباعتُهَا كمَا هيَ

00:05:39.060 --> 00:05:40.480
ولإصلاحِ هذا الخطأِ

00:05:41.160 --> 00:05:43.400
قمْ بوضعِ علامتيِّ تنصيصٍ كالتالي

00:05:53.120 --> 00:05:57.520
منَ المثالِ السابقِ تعلمنا القاعدةَ الثالثةَ منْ قواعدِ لُغةِ الـ #C

00:05:57.560 --> 00:06:04.240
ألا وهيَ أنَّهُ في حالِ طباعةِ نصٍ يجبُ وضعهُ بينَ علامتيِّ تنصيصٍ

00:06:04.740 --> 00:06:06.280
أمَّا في المثالِ التالِي

00:06:06.440 --> 00:06:09.260
فستتعرفُ هنا على أكثرِ الأخطاءِ شيوعاً

00:06:09.480 --> 00:06:12.460
ألا وهوَ صيغةُ أحرفِ الكلماتِ المحجوزةِ

00:06:13.120 --> 00:06:16.540
حيثُ ستجدُ رسالةً مفادُها

00:06:16.800 --> 00:06:19.760
أنَّ المترجِمَ لمْ يَقمْ بالتَّعرفِ على كلمةِ console

00:06:20.200 --> 00:06:24.620
وستسألُ نفسكَ: لقد قمتُ بكتابتِهَا بشكلٍ صحيحٍ فلِمَ الخطأُ؟

00:06:25.000 --> 00:06:28.740
والجوابُ هوَ أنكَ لو لاحظتَ أثناءَ كتابتِنا للَّتطبيقِ الأوَّلِ

00:06:28.960 --> 00:06:34.140
أنَّي قمتُ بالتَّنويهِ على ضرورةِ كتابةِ الكلمةِ بحرفٍ كبيرٍ في بدايتِها

00:06:34.700 --> 00:06:41.980
ولحلِّ هذهِ المشكلَةِ يجبُ تغييرُ كلمةِ console  إلى Console

00:06:50.860 --> 00:06:54.500
أعلمُ أنَّكَ ستجدُ صعوبةً في تقبُّلِ هذهِ النقطةِ بالتحديدِ

00:06:54.740 --> 00:06:59.800
لأنَّنا لمْ نتعودْ على هذهِ الدقةِ في كتاباتِنَا أو في حياتِنَا العمليةِ

00:07:00.120 --> 00:07:04.560
ولكنْ عندَ التَّعاملِ معَ الحاسوبِ يجبُ علينا أنْ نكونَ بتلكَ الدِّقةِ

00:07:04.920 --> 00:07:09.660
وستتعودُ على هذا الأمرِ خلالَ ممارستكَ للبرمجةِ أكثرَ فأكثرَ

00:07:10.440 --> 00:07:15.020
ومنَ المثالِ السابقِ تعلمنا القاعدةَ الرابعةَ منْ قواعدِ لُغةِ الـ #C

00:07:15.100 --> 00:07:22.200
ألا وهيَ أنَّ هذهِ اللغةَ حساسةٌ لصيغةِ أحرفِ الكلمةِ Case Sensitive

00:07:22.540 --> 00:07:26.680
بمعنَى أنَّ الحرفَ الصغيرَ small letter c

00:07:27.020 --> 00:07:29.960
والحرفَ الكبيرَcapital letter C

00:07:30.580 --> 00:07:34.840
تعنِي أنَّكَ تقومُ بكتابةِ كلمتينِ مختلفتينِ كُلياً

00:07:35.360 --> 00:07:36.740
وفي مثالِنَا الأخيرِ

00:07:36.840 --> 00:07:40.800
ستجدُ أنَّ المشكلةَ مشابهةٌ تماماً للمثالِ السابقِ

00:07:41.440 --> 00:07:46.600
حيثُ أنَّنا لمْ نراعِ الحروفَ الكبيرةَ في الكلمتينِread key

00:07:47.020 --> 00:07:49.940
والجميلُ في الأمرِ أنَّهُ إنْ لمْ تكنْ بتلكَ الدِّقةِ

00:07:50.100 --> 00:07:53.780
أو لمْ تكنْ قادراً على حفظِ هذهِ الكلماتِ بشكلٍ صحيحٍ

00:07:54.060 --> 00:07:57.020
فإنَّ برنامجَ الـ Visual Studio سيساعدُكَ في ذلكَ

00:07:57.340 --> 00:07:59.340
ليسَ في اقتراحِ إكمالِ الكلمةِ فحسب

00:07:59.840 --> 00:08:02.120
بلْ بكتابتِها بشكلٍ صحيحٍ أيضاً

00:08:02.660 --> 00:08:06.880
فلو قمتَ بكتابةِ الكلمةِ readkey بأحرفٍ صغيرةٍ

00:08:13.060 --> 00:08:18.580
ستلاحظُ أنَّ البرنامجَ وبمجردِ فتحِ الأقواسِ قامَ بإصلاحِها تلقائياً

00:08:22.820 --> 00:08:26.960
بالتالي قامَ بتقليلِ الأخطاءِ الَّتي قدْ تقعُ فيها مُستقبلاً

00:08:27.680 --> 00:08:30.320
ولعلَّهُ يتبادرُ إلى ذهنكَ الآنَ

00:08:30.620 --> 00:08:34.700
أنَّهُ إنْ كانَ البرنامجُ يقومُ بالإصلاحِ تلقائياً

00:08:34.880 --> 00:08:39.320
فلِمَ تقومُ بالتركيزِ على ضرورةِ الانتباهِ إلى صيغةِ أحرفِ الكلماتِ؟

00:08:39.980 --> 00:08:42.820
والحقيقةُ أنَّي أريدُ تثبيتَ هذهِ القاعدةِ

00:08:43.080 --> 00:08:45.080
لأنَّكَ إنِ اضطررتَ لاستخدامِ

00:08:45.240 --> 00:08:48.440
محررٍ للنصوصِ غيرَ برنامج الـ Visual Studio

00:08:48.760 --> 00:08:52.660
ولمْ يكنْ بهِ خاصيةُ إصلاحِ الأخطاءِ أوتوماتيكياً

00:08:52.660 --> 00:08:53.640
IntelliSense

00:08:54.060 --> 00:08:58.020
أنْ تكونَ قادراً على تذكُّرِ صيغةِ الكلماتِ المحجوزةِ

00:08:58.580 --> 00:09:01.580
لو قمتَ بكتابةِ تطبيقِنَا الأوَّلِ بشكلٍ صحيحٍ

00:09:01.820 --> 00:09:05.940
فلقدْ اجتزتَ أوَّلَ وأهمَّ مرحلةٍ لبناءِ وتطويرِ التَّطبيقاتِ

00:09:06.460 --> 00:09:09.460
أمَّا إنْ واجهتكَ مشكلةٌ ولمْ تستطعْ حلَّهَا

00:09:09.620 --> 00:09:12.940
فقمْ بمقارنَةِ ما قمتُ بكتابتهِ حرفاً حرفاً

00:09:13.320 --> 00:09:16.380
وخذْ وقتكَ الكافِي حتَّى تكتشفَ طريقةَ حلِّهَا

00:09:16.640 --> 00:09:21.580
لأنَّهُ معَ مرورِ الوقتِ ستقفزُ عينُكَ مباشرةً إلى مكانِ الخطأِ

00:09:21.860 --> 00:09:25.740
وستكونُ قادراً على التَّنبؤِ بطريقةِ حلِّها بشكلٍ سريعٍ

00:09:26.360 --> 00:09:29.500
أيضاً سأقومُ بإرفاقِ التَّطبيقِ الَّذي كتبناهُ معاً

00:09:29.660 --> 00:09:33.700
لتتمكنَ منْ مقارنتهِ بما قمتَ أنتَ بكتابتهِ

00:09:34.100 --> 00:09:36.960
أراك في الدرس التالي إن شاء الله

