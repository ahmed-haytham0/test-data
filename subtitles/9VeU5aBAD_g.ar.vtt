WEBVTT
Kind: captions
Language: ar

00:00:08.840 --> 00:00:10.080
ما هو الـ Syntax؟

00:00:10.580 --> 00:00:13.380
وما هي المكتبات البرمجية الـ Class Library؟

00:00:13.720 --> 00:00:16.940
وما هي مكونات الـ Dot Net Framework؟

00:00:17.320 --> 00:00:20.200
وكيف نقوم بكتابة جمل ملاحظات؟

00:00:20.500 --> 00:00:23.500
هذا ما سوفَ نتعرفُ عليهِ في هذا الدرس

00:00:23.500 --> 00:00:25.300
بعدَ الفاصلِ إن شاء الله

00:00:34.100 --> 00:00:36.460
السلامُ عليكم ورحمةُ اللهِ وبركاته

00:00:36.460 --> 00:00:38.800
وأهلاً بكمْ في الدرس السادس من دروسِ سلسلةِ

00:00:38.800 --> 00:00:43.420
تَعلُمِ البرمجةِ للمبتدئينَ كلياً بواسطةِ السي شارب

00:00:44.440 --> 00:00:47.860
في البدايةِ أودُ الإشارةَ إلى منتدى منصةِ طورني

00:00:48.140 --> 00:00:52.240
حيثُ أودُ شكرَ كلِّ الأعضاءِ الذينَ أثروهُ بمواضيعهم

00:00:52.660 --> 00:00:57.180
وأطلبُ منكَ زيارتَهُ في حالِ احتياجكَ لأيِّ مساعدة

00:00:57.540 --> 00:00:59.880
ففيهِ الكثيرُ ممنْ يودونَ مساعدتك

00:01:00.900 --> 00:01:03.160
في هذا الدرسِ سنقومُ بالتعرفِ أكثر

00:01:03.360 --> 00:01:06.960
على الأسطرِ البرمجيةِ التي كتبناها في تطبِيقِنا الأول

00:01:07.720 --> 00:01:10.200
سابقاً كنْتُ أريدُ مِنكَ التركيزَ على

00:01:10.240 --> 00:01:12.240
ماذا كتبنا وكيفيةِ الكتابة

00:01:12.860 --> 00:01:17.300
لكنْ الآن سنقومُ بالتركيزِ على لماذا قُمنا بكتابةِ ذلك

00:01:17.740 --> 00:01:21.200
وبما أننا قُمنا بالتعرفِ على بعضِ قواعدِ الكتابة

00:01:21.440 --> 00:01:26.040
ستكونُ متهيئاً لكافةِ المعلوماتِ التي سنتعلمها في هذا الدرس

00:01:27.080 --> 00:01:29.460
عندما تنوي تعلمَ تطويرِ التطبيقات

00:01:29.820 --> 00:01:33.000
وبعدَ اختياركَ للغةِ البرمجةِ التي ارتحتَ لها

00:01:33.280 --> 00:01:37.700
أنتَ بحاجةٍ إلى التعرفِ على قسمينِ أساسيينِ لإجادةِ هذهِ اللغة

00:01:38.420 --> 00:01:41.460
فمعرفتكَ لأسماءِ وأفعالِ الأسطرِ البرمجية

00:01:41.720 --> 00:01:44.420
أو ما يُطلقُ عليهِ اسمُ الـ Syntax

00:01:44.920 --> 00:01:47.020
هو فعلياً القسمُ الأولُ مِنَ الموضوع

00:01:47.720 --> 00:01:48.780
أما القسمُ الثاني

00:01:49.060 --> 00:01:53.260
فهو مَعرفةُ الكلماتِ المحجوزةِ الـ Keywords المعدّةِ مسبقاً

00:01:53.680 --> 00:01:57.380
والتي تكونُ متاحةً للاستخدامِ في كتابةِ تطبيقك

00:01:58.480 --> 00:02:03.540
وتقدمُ لنا شَركةُ Microsoft شيئاً يدعى Dot Net Framework

00:02:04.280 --> 00:02:08.400
الذي يُقدمُ مَجموعةً مِنَ المكوناتِ لتسهلَ عمليةِ التطوير

00:02:09.360 --> 00:02:11.880
وسنقومُ بشرحِ بعضٍ مِنْ مُكوناته

00:02:11.880 --> 00:02:14.580
بما يتناسبُ مَع مُستوى هذهِ السلسلة

00:02:15.440 --> 00:02:19.340
فالعنصرُ الأولُ هوَ المكتباتُ البرمجية Class Library

00:02:20.140 --> 00:02:23.720
حيثُ قامتْ الشركةُ بكتابةِ العديدِ مِنَ المكتباتِ البرمجية

00:02:23.920 --> 00:02:26.760
التي يَحتاجُها تَطبيقنا بشكلٍ أساسي

00:02:27.380 --> 00:02:29.700
مِثلَ التعاملِ مَعَ المعادلاتِ الرياضية

00:02:29.840 --> 00:02:31.120
والتعامُلِ مع النصوصِ

00:02:31.480 --> 00:02:33.280
والتعاملِ مع التاريخِ والوقتِ

00:02:33.560 --> 00:02:35.400
وإظهارِ المعلوماتِ على الشاشة

00:02:35.560 --> 00:02:38.680
وأمورٍ كثيرةٍ سنتعرفُ عليها مُستقبلاً

00:02:39.480 --> 00:02:42.800
كل هذهِ المكتباتِ كانَ منَ الصعبِ علينا كتابتُها

00:02:43.220 --> 00:02:46.000
خصوصاً أنها أساسيةٌ في كلِّ تطبيق

00:02:46.840 --> 00:02:50.520
والمُكونُ الثاني مِنْ مُكوناتِ الـ Net Framework. هو

00:02:50.520 --> 00:02:54.800
الـ Runtime والمعروفُ بـ CLR

00:02:55.080 --> 00:02:58.720
المختصرُ مِنَ المصطلحِ Common Language Runtime

00:02:59.260 --> 00:03:02.820
ويمكنَ تشبيهَهُ بالفقاعةِ التي تُحيطُ بتطبيقَك

00:03:03.360 --> 00:03:08.040
حيثُ يعيشُ تطبيقُكَ داخلَ هذهِ الفقاعةِ وتقومُ بحمايته

00:03:08.500 --> 00:03:13.360
وتتكفلُ بالعديدِ منَ التفاصيلِ ذو المستوى المتدني Low Level

00:03:13.880 --> 00:03:17.780
لتدعكَ تركزُ بشكلٍ أساسيٍ على هدفِ التطبيق

00:03:18.180 --> 00:03:21.700
ولا تقلقْ بشأن أمورٍ مثل نوعِ نظامِ التشغيلِ

00:03:22.160 --> 00:03:25.700
أو إدارةِ الذاكرةِ المستخدمة Memory Usage

00:03:26.020 --> 00:03:29.760
أو حتى بطريقةِ التعاملِ مع الملفاتِ في القرصِ الصلب

00:03:30.440 --> 00:03:33.120
وفي نفسِ الوقت، يقوم الـ CLR

00:03:33.320 --> 00:03:36.480
بتقديمِ طبقةِ حمايةٍ للزبونِ نفسه

00:03:37.000 --> 00:03:42.220
حيثُ يَمنعكَ كمطورٍ للتطبيقاتِ بالحصولِ على معلوماتهم الخاصة

00:03:42.640 --> 00:03:47.960
أو بالعبثِ بأجهزتهم دونَ أخذِ إذنٍ مسبقٍ منهم

00:03:48.400 --> 00:03:53.840
حيثُ تظهرُ رسالةٌ للزبونِ تخبرُهُ أنكَ تحتاجُ هذهِ الصلاحية

00:03:54.780 --> 00:03:57.660
بعدَ المقدمةِ البسيطةِ عن الـ Net Framework.

00:03:58.200 --> 00:03:59.440
نعودُ لتطبيقنا الأول

00:03:59.840 --> 00:04:02.740
حيثُ ستجدُ في السطرِ الثالثِ عشرْ

00:04:03.080 --> 00:04:05.420
أننا استخدمنا مكتبةً برمجية

00:04:05.420 --> 00:04:08.160
تقومُ بطباعةِ نصٍ على الشاشة

00:04:08.620 --> 00:04:11.640
وقمنا بإعطائهِ النصْ بينَ علامتي تنصيص

00:04:14.240 --> 00:04:16.780
فنحنُ لا نهتمُ بكيفيةِ القيامِ بهذا الأمر

00:04:17.080 --> 00:04:18.640
بل نهتمُ بالنتيجة

00:04:19.140 --> 00:04:23.180
لاحظْ أننا في هذا السطرِ قمنا باستخدامِ داله Method

00:04:23.680 --> 00:04:26.820
قام شخصٌ منْ شركة Microsoft بكتابتها

00:04:27.560 --> 00:04:30.480
لأخذِ جملةٍ وطباعتِها على الشاشة

00:04:31.080 --> 00:04:32.720
وفي السطرِ الـرابعِ عشر

00:04:33.080 --> 00:04:34.800
أخبرنا التطبيقَ أنْ ينتظر

00:04:35.300 --> 00:04:40.420
بواسطة الكلمة المحجوزة ReadKey

00:04:40.760 --> 00:04:44.540
لكي يقومَ المستخدمُ بإدخالِ حرفٍ قبل إنهاءِ التطبيق

00:04:45.260 --> 00:04:50.980
وسببُ وضعِ هذهِ الجملةِ أننا نريدُ رؤيةَ نتيجة الطباعة في الجملة السابقة

00:04:51.500 --> 00:04:54.500
وفي حال لم تَضعْها فسيطبعُ التطبيقُ الجملة

00:04:54.640 --> 00:04:57.620
وسيصلُ إلى نهايةِ التطبيقِ ويخُرجُ منه

00:04:58.040 --> 00:05:00.040
دونَ أن يسمحَ لكَ برؤيةِ النتيجة

00:05:00.820 --> 00:05:05.120
ولرؤيةِ ذلكَ قمْ بجعلِها جملةَ ملاحظة Comments

00:05:05.600 --> 00:05:09.280
وذلكَ بكتابةِ // قبلَ بدايةِ السطر

00:05:09.580 --> 00:05:10.480
هكذا

00:05:14.240 --> 00:05:18.800
وتعني أنَّ التطبيقَ لن يقومَ بتنفيذِ هذهِ الجملةَ وسيتجاهلها

00:05:19.320 --> 00:05:21.340
بإمكاننا حذفُ هذا السطرِ نهائياً

00:05:21.700 --> 00:05:23.740
لكنْ ربما نحتاجهُ لاحقاً

00:05:23.860 --> 00:05:25.820
ولا داعي لكتابتهِ منْ جديد

00:05:26.400 --> 00:05:30.500
وجُمَلُ الملاحظاتِ تتعدى هذهِ الميزةِ بميزاتٍ أخرى

00:05:30.840 --> 00:05:35.140
فتستطيعُ مِنْ خِلالها كتابة ملاحظاتٍ لفقرةٍ برمجية

00:05:35.520 --> 00:05:37.520
لتتذكرَ وظيفتها بالضبط

00:05:37.800 --> 00:05:42.420
وتكونُ مذكَّرَة لكَ في حالِ عودتكَ بعدَ فترةٍ منَ الزمن

00:05:42.940 --> 00:05:47.940
أو تكونُ شَرحاً لشخصٍ آخرٍ يريدُ التعديلَ على أسطركَ البرمجية

00:05:48.560 --> 00:05:50.600
إن حاولتَ تنفيذَ التطبيق الآن

00:05:50.800 --> 00:05:54.400
ستجدُ أنَّ هناكَ شاشة ظهرتْ ثم اختفتْ بسرعة

00:05:55.040 --> 00:05:58.620
وذلكَ لأن التطبيقَ قامَ بتنفيذِ الأسطرِ على التوالي

00:05:58.760 --> 00:06:01.940
فقامَ بطباعةِ الجمل ثم وصلَ إلى نهايةِ التطبيق

00:06:03.080 --> 00:06:06.780
وخرجَ من التطبيقِ ليعودَ مرةً أخرى إلى برنامج الـ Visual Studio

00:06:07.400 --> 00:06:09.680
أما إن تراجعنا عنْ جملةِ الملاحظة

00:06:10.920 --> 00:06:12.640
وقمنا بتشغيلِ التطبيق

00:06:14.380 --> 00:06:16.160
سنرى جملةَ Hello World

00:06:16.660 --> 00:06:21.820
وسينتظرُ البرنامجُ مِنَّا إدخالَ أيِّ حرفٍ لينتهي مِنَ التطبيق

00:06:24.520 --> 00:06:28.340
ويَجدرُ بالذكرِ أنَّ هناكَ كلمة مرادفة لـ ReadKey

00:06:28.340 --> 00:06:30.420
إلا وهي ReadLine

00:06:30.420 --> 00:06:36.300
وتقومُ بانتظارِ مدخلاتٍ ثم زر Enter

00:06:42.740 --> 00:06:45.060
يمكننا كتابةُ الكلماتِ التي نريد

00:06:45.200 --> 00:06:49.260
ويجبُ أن ننهِيَها بزرِّ الإدخال Enter منْ لوحةِ المفاتيح

00:06:49.260 --> 00:06:50.420
لينتهي التطبيق

00:06:52.540 --> 00:06:56.580
بمجرد أن قمت على ال Keyboard بكتابة أي حرف

00:06:56.580 --> 00:06:57.740
لم ينتهي التطبيق

00:06:58.280 --> 00:07:02.020
وبمجرد الضغط على زر Enter  إنتهى التطبيق

00:07:02.920 --> 00:07:05.180
في درسنا السابق تعرفنا بشكل بسيط

00:07:05.180 --> 00:07:06.660
على مفهوم الـ Code Block

00:07:07.200 --> 00:07:12.680
وتعرفنا أنها عبارةٌ عنْ قطعةٍ برمجيةٍ تبدأُ بقوسٍ وتنتهي بآخر

00:07:13.460 --> 00:07:16.460
وفي هذا التطبيقِ هناكَ العديدُ مِنَ القطعِ البرمجية

00:07:17.280 --> 00:07:20.180
و تحملُ القطعةُ البرمجيةُ غالباً اسماً

00:07:20.560 --> 00:07:21.980
ففي مثالنا هنا

00:07:22.240 --> 00:07:26.020
هذهِ القطعةُ البرمجيةُ تحملُ اسم Main

00:07:27.240 --> 00:07:30.500
وهذهِ القطعةُ البرمجيةُ تُسمى داله Method

00:07:31.040 --> 00:07:33.480
ومن المتعارفِ عليهِ أنَّ الـ Main Method

00:07:33.760 --> 00:07:37.980
هيَ الدالةُ التي يَبدأُ بها التطبيقُ في كلِّ مرةٍ تَقومُ بتشغيله

00:07:38.800 --> 00:07:44.500
ولا أريدكَ أنْ تقلقَ بشأنِ الكلماتِ الموجودةِ قبلَ كلمةِ Main

00:07:44.760 --> 00:07:47.500
لأننا سنتكلمُ عنها لاحقاً إن شاء الله

00:07:48.680 --> 00:07:50.040
ولو لاحظتَ معي أيضاً

00:07:50.040 --> 00:07:55.120
أنَّ الـ Main Method موجودةٌ داخلَ قطعةٍ برمجيةٍ أخرى

00:07:56.060 --> 00:07:59.080
اسمها Program وهي من النوع Class

00:08:00.120 --> 00:08:03.420
وهي المكانُ الذي سيحوي كلَّ الـ Methods

00:08:03.420 --> 00:08:06.280
التي سنقومُ بكتابتها لاحقاً

00:08:07.000 --> 00:08:11.840
ولهُ الكثيرُ من الخصائِصِ والميزاتِ التي سنتكلمُ عنها لاحقاً

00:08:12.360 --> 00:08:18.140
وستلاحظُ أيضاً أن الـ Class موجودٌ في قطعةٍ برمجيةٍ أخرى

00:08:19.140 --> 00:08:23.300
اسمها HelloWorld وهي مِنَ النوع namespace

00:08:24.640 --> 00:08:28.880
وهيَ الحاويةُ لجميعِ الـ Classes الموجودةِ بداخلِ برنامجك

00:08:29.260 --> 00:08:31.060
وستجدُ أنَّ اسمَها

00:08:31.300 --> 00:08:35.800
مُطابقٌ لاسمِ المشروعِ الذي أنشأناه في الدرس الأول

00:08:36.180 --> 00:08:37.840
لو لاحظت في تطبيقنا الأول

00:08:38.020 --> 00:08:40.300
أننا قمنا باستدعاءِ مكتبات Classes

00:08:40.680 --> 00:08:44.380
واستخدمنا بعضَ الدوالِ Methods الموجودةِ ضِمنها

00:08:45.020 --> 00:08:48.100
فقدْ قمنا باستخدامِ الـ Console Class

00:08:48.960 --> 00:08:52.020
واخترنا الـ WriteLine Method منه

00:08:53.060 --> 00:08:56.440
فبمجردِ كتابةِ اسم الـ Class وإتباعهِ بنقطه

00:08:56.660 --> 00:08:59.620
سترى جميعَ الـ Methods المتوفرةِ بداخله

00:09:00.140 --> 00:09:03.400
وهذه النقطةُ Dot بعد اسم الـ Class

00:09:03.900 --> 00:09:09.340
تَعملُ عَمَلَ فهرس الكتابِ الذي يسمحُ لكَ بمعرفةِ الوحداتِ الموجودةِ فيه

00:09:10.160 --> 00:09:13.280
ويطلقُ عليها اسم Member Accessor

00:09:13.720 --> 00:09:16.200
ونلاحظُ أنَّ جميعَ الدوال Methods

00:09:16.560 --> 00:09:19.700
تبدأ بقوسٍ وتنتني بقوسٍ آخر

00:09:20.060 --> 00:09:21.100
فمثلاً هنا

00:09:21.660 --> 00:09:25.440
WriteLine تبدأ بقوس وتنتهي بقوس آخر

00:09:25.440 --> 00:09:30.520
وهنا الـ ReadLine تبدأ بقوسٍ وتنتهي بقوسٍ آخر

00:09:31.820 --> 00:09:36.660
وبعضُها تحتوي على قيمٍ بداخلِ الأقواسِ كما WriteLine

00:09:37.660 --> 00:09:40.280
تستخدمها الدالةُ في إجراءِ وظيفتها

00:09:40.800 --> 00:09:44.800
وبعضها الأخرْ لا يحتاجُ لتلكَ القيمِ مثل ReadLine

00:09:45.020 --> 00:09:47.840
لا تحتاج ، هناك فراغ لا يوجد هناك قيمة

00:09:50.140 --> 00:09:53.320
وسنقومُ لاحقاً بالحديثِ أكثر عنْ هذهِ القيمِ

00:09:53.320 --> 00:09:55.000
التي تتواجدُ بينَ الأقواس

00:09:55.300 --> 00:09:57.380
وكلْ ما عليكَ معرفتهُ الآن

00:09:57.520 --> 00:10:03.260
هو أنَّ لإستدعاءَ دالةِ يتمُّ بذكِرِ اسمها وكتابةِ أقواسها

00:10:03.260 --> 00:10:04.240
الخاصة فيها

00:10:04.440 --> 00:10:07.840
وإعطاءِها قيمة إنْ كانتْ تَحتاجُ لذلك

00:10:08.500 --> 00:10:11.940
كما تحدثنا في الدرسِ السابقِ بخصوصِ الفاصلةِ المنقوطة

00:10:12.200 --> 00:10:15.340
أنها كقواعدِ كتابةِ الجملِ في اللغةِ العربية

00:10:15.940 --> 00:10:18.820
تأتي في نهايةِ السطرِ البرمجي

00:10:19.020 --> 00:10:22.140
لتخبرَ البرنامِجَ أنَّ هذا السطرَ قدْ انتهى

00:10:22.600 --> 00:10:27.040
فكما رأينا سابقاً أننا لو قمنا بوضعِ السطرينِ في سطرٍ واحد

00:10:28.080 --> 00:10:31.160
فلن يحدثَ أي مشكلةٍ في البرنامج

00:10:31.400 --> 00:10:32.500
وبالمثلِ أيضاً

00:10:32.820 --> 00:10:36.440
إن قُمنا بتقسيمِ الجملةِ إلى عدةِ أقسامٍ

00:10:44.140 --> 00:10:46.340
فلن يحدثَ أيُّ مشكلةٍ أيضاً

00:10:46.820 --> 00:10:48.400
والشيءُ المهمُ هنا

00:10:49.080 --> 00:10:52.520
أنْ تنتهي الجملةُ البرمجيةُ بالفاصلةِ المنقوطة

00:10:52.960 --> 00:10:56.560
والجميلُ بالأمرِ أنكَ إنْ تركتَ مسافاتٍ زائدة

00:10:56.560 --> 00:11:01.120
فإن برنامجَ الـ Visual Studio وبمجردِ وضعِ الفاصلةِ المنقوطة

00:11:01.360 --> 00:11:05.760
سيقومُ تلقائياً بترتيبِ السطرِ بشكلٍ متناسق

00:11:06.080 --> 00:11:07.120
فمثلاً هنا

00:11:17.460 --> 00:11:20.300
بمجرد كتابةِ الفاصلة المنقوطة ;

00:11:21.040 --> 00:11:23.900
مباشرة قام البرنامج بتنسيق الجملة

00:11:26.660 --> 00:11:30.140
ولذلك ليسهل عليك قراءةِ البرنامجِ بشكلٍ أفضل

00:11:30.560 --> 00:11:34.680
فضلاً عن أنَّ البرنامجَ قامَ بوضعِ ألوانٍ متنوعة

00:11:34.680 --> 00:11:36.340
فهنا تجد اللون الأزرق

00:11:36.340 --> 00:11:37.680
وهنا اللون النيلي

00:11:37.680 --> 00:11:39.740
وهنا اللون الأحمر

00:11:40.720 --> 00:11:42.140
وهناك ألوانٌ أخرى

00:11:43.120 --> 00:11:45.540
ليسهلَ عليكَ القراءة أيضاً

00:11:45.840 --> 00:11:49.320
وهذا ما سوفَ نتعرفُ عليهِ في الدروسِ المقبلةِ

00:11:49.540 --> 00:11:50.480
إن شاء الله

00:11:50.740 --> 00:11:52.140
أراك في الدرسِ التالي

